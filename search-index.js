var searchIndex = JSON.parse('{\
"commitment_dlog":{"doc":"","t":[0,0,0,3,8,16,3,16,3,5,5,11,11,11,11,11,11,5,12,12,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,10,11,5,11,11,12,5,12,10,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11],"n":["chunked","commitment","srs","Challenges","CommitmentCurve","Map","OpeningProof","Params","PolyComm","b_poly","b_poly_coefficients","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","ceil_log2","chal","chal_inv","challenges","chunk_blinding","chunk_commitment","clone","clone","clone_into","clone_into","combine","combine_one","combine_one_endo","combined_inner_product","delta","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","fmt","fmt","from","from","from","init","init","init","into","into","into","lr","map","multi_scalar_mul","of_coordinates","prechallenges","product","scale","serialize","sg","shift_scalar","shifted","to_coordinates","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unshifted","vzip","vzip","vzip","z1","z2","SRS","add_lagrange_basis","borrow","borrow_mut","clone","clone_into","commit","commit_evaluations","commit_evaluations_non_hiding","commit_helper","commit_non_hiding","create","default","deref","deref_mut","deserialize","drop","endo_q","endo_r","endos","fmt","from","g","h","init","into","lagrange_bases","mask","max_degree","open","serialize","to_owned","try_from","try_into","type_id","verify","vzip"],"q":["commitment_dlog","","","commitment_dlog::commitment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","commitment_dlog::srs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","This module implements Dlog-based polynomial commitment …","This module implements the Marlin structured reference …","","","","","","A polynomial commitment.","Returns (1 + chal[-1] x)(1 + chal[-2] x^2)(1 + chal[-3] …","","","","","","","","Returns ceil(log2(d)) but panics if d = 0.","","","","Multiplies each blinding chunk of f with powers of zeta^n …","Multiplies each commitment chunk of f with powers of zeta^n","","","","","","Combine where x1 = one","Combine where x1 = one","Computes the linearization of the evaluations of a …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","vector of rounds of L &amp; R commitments","","","","","Returns the product of all the field elements belonging to …","","","","Inside the circuit, we have a specialized scalar …","","","","","","","","","","","","","","","","","","","","","Compute commitments to the lagrange basis corresponding to …","","","","","Commits a polynomial, potentially splitting the result in …","","","","This function commits a polynomial using the SRS’ basis …","This function creates SRS instance for circuits with …","","","","","","Coefficient for the curve endomorphism","Coefficient for the curve endomorphism","","","Returns the argument unchanged.","The vector of group elements for committing to polynomials …","A group element used for blinding commitments","","Calls <code>U::from(self)</code>.","Commitments to Lagrange bases, per domain size","Turns a non-hiding polynomial commitment into a hidding …","","This function opens polynomial commitments in batch plnms: …","","","","","","This function verifies batch of batched polynomial …",""],"i":[0,0,0,0,0,1,0,1,0,0,0,2,3,4,2,3,4,0,2,2,4,3,3,3,4,3,4,1,1,1,0,4,2,3,4,2,3,4,3,2,3,4,3,4,2,3,4,2,3,4,2,3,4,4,3,3,1,4,0,3,3,4,0,3,1,3,4,2,3,4,2,3,4,2,3,4,3,2,3,4,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[null,null,null,null,null,null,null,null,null,[[["field",8]],["field",8]],[[],["vec",3,[["field",8]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["usize",0]],null,null,[[["",0],["",0]],["challenges",3]],[[["",0]]],[[["",0]]],[[["",0]],["polycomm",3]],[[["",0]],["openingproof",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["vec",3]],[[],["vec",3]],[[["scalarchallenge",3]],["vec",3]],[[["usize",0]]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],null,[[["",0]],["polycomm",3]],[[]],[[]],[[["",0],["",0]],["vec",3,[["scalarchallenge",3]]]],[[],["field",8]],[[["",0]],["polycomm",3]],[[["",0]],["result",4]],null,[[]],null,[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[]],[[]],[[]],null,null,null,[[["",0],["d",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["srs",3]],[[["",0],["",0]]],[[["",0],["densepolynomial",3],["option",4,[["usize",0]]]]],[[["",0],["d",3],["evaluations",3],["option",4,[["usize",0]]]]],[[["",0],["d",3],["evaluations",3],["option",4,[["usize",0]]]],["polycomm",3]],[[["option",4,[["usize",0]]],["bool",0],["option",4,[["usize",0]]]],["polycomm",3]],[[["",0],["densepolynomial",3],["option",4,[["usize",0]]]],["polycomm",3]],[[["usize",0]]],[[],["srs",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],null,null,[[]],[[["",0],["formatter",3]],["result",6]],[[]],null,null,[[],["usize",0]],[[]],null,[[["",0],["polycomm",3]]],[[["",0]],["usize",0]],[[["",0],["",0]],["openingproof",3]],[[["",0]],["result",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["vec",3],["",0]],["bool",0]],[[]]],"p":[[8,"CommitmentCurve"],[3,"Challenges"],[3,"PolyComm"],[3,"OpeningProof"],[3,"SRS"]]},\
"export_test_vectors":{"doc":"","t":[13,13,4,11,11,11,11,11,11,11,11,11,11,5,11,11,11,0,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,12,11,11,12,12,5,5,11,11,12,11,11,11,11,11,11,11,11],"n":["B10","Hex","Mode","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","from_str","init","into","main","try_from","try_into","type_id","vectors","vzip","TestVector","TestVectors","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","generate","init","init","input","into","into","name","output","poseidon","rand_fields","serialize","serialize","test_vectors","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["export_test_vectors","","","","","","","","","","","","","","","","","","","export_test_vectors::vectors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","creates a set of test vectors","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Computes the poseidon hash of several field elements. Uses …","generates a vector of <code>length</code> field elements","","","","","","","","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,2,3,2,3,2,3,2,3,2,3,2,3,2,3,0,2,3,3,2,3,2,3,0,0,2,3,2,2,3,2,3,2,3,2,3],"f":[null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["str",0]],["result",4]],[[],["usize",0]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["mode",4]],["testvectors",3]],[[],["usize",0]],[[],["usize",0]],null,[[]],[[]],null,null,[[],["fp",6]],[[["u8",0]],["vec",3,[["fp",6]]]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]]],"p":[[4,"Mode"],[3,"TestVectors"],[3,"TestVector"]]},\
"flamegraph":{"doc":"","t":[5,5],"n":["black_box","main"],"q":["flamegraph",""],"d":["function to avoid optimizations by the compiler taken from …",""],"i":[0,0],"f":[[[]],[[]]],"p":[]},\
"groupmap":{"doc":"","t":[3,8,10,11,11,11,11,11,11,11,5,11,11,10,11,10,11,11,11,11,11],"n":["BWParameters","GroupMap","batch_to_group_x","batch_to_group_x","borrow","borrow_mut","deref","deref_mut","drop","from","get_y","init","into","setup","setup","to_group","to_group","try_from","try_into","type_id","vzip"],"q":["groupmap","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","Returns the argument unchanged.","returns the y-coordinate if x is a valid point on the …","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,1,2,2,2,2,2,2,2,0,2,2,1,2,1,2,2,2,2,2],"f":[null,null,[[["",0],["vec",3]],["vec",3]],[[["",0],["vec",3]],["vec",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["option",4]],[[],["usize",0]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]]],"p":[[8,"GroupMap"],[3,"BWParameters"]]},\
"kimchi":{"doc":"","t":[0,0,0,0,0,0,0,0,3,3,4,13,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,3,13,13,4,13,3,3,17,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,12,5,5,11,11,11,11,12,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,12,12,12,11,11,12,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,12,12,5,5,12,12,12,12,12,12,12,3,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,3,13,3,13,13,13,4,13,4,3,13,13,6,13,13,3,4,13,13,13,13,13,3,13,13,13,13,3,13,13,13,13,13,13,13,13,4,4,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,11,11,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,12,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,12,12,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,12,5,5,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,13,13,13,13,3,13,13,4,13,13,4,4,3,3,13,13,3,3,3,6,4,13,13,13,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,0,0,0,17,17,17,17,17,5,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,0,0,0,0,0,0,0,0,17,17,17,17,5,5,5,5,0,5,5,5,5,17,5,17,5,5,17,3,12,11,11,5,5,11,11,11,11,5,11,11,12,11,11,11,11,13,17,13,17,17,4,13,13,11,11,11,11,11,11,11,11,0,11,11,11,11,12,12,12,12,12,12,5,5,12,12,17,3,8,16,16,3,17,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,5,11,11,5,17,17,17,3,11,11,5,11,11,11,11,11,11,12,12,11,11,11,11,17,3,12,11,11,5,11,11,11,11,11,11,12,11,11,11,11,5,3,3,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,12,12,12,12,17,6,17,17,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,13,13,13,4,13,6,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,11,11,11,11,11,11,12,12,12,5,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,5,11,12,12,12,11,11,11,11,12,11,11,11,11,11,11,12,12,5,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,8,10,10,10,10,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,12,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,12,11,11,12,11,11,12,11,12,11,12,11,11,12,12,12,12,11,11,11,11,12],"n":["alphas","bench","circuits","error","index","plonk_sponge","prover","verifier","Alphas","Builder","ConstraintType","Gate","Lookup","MustConsumeIterator","Permutation","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","discard","drop","drop","drop","drop","drop","eq","fmt","fmt","fmt","from","from","from","from","get_alphas","get_hash","get_powers","hash","init","init","init","init","into","into","into","into","into_iter","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","new","next","register","serialize","serialize","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","BenchmarkCtx","CIRCUIT_SIZE","batch_verification","borrow","borrow_mut","create_proof","deref","deref_mut","drop","from","init","into","new","try_from","try_into","type_id","vzip","constraints","domains","expr","gate","gates","macros","polynomial","polynomials","scalars","wires","ConstraintSystem","Custom","DisconnectedWires","GateError","IncorrectPublic","LookupConstraintSystem","Shifts","ZK_ROWS","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chacha8","clone","clone","clone_into","clone_into","coefficients8","complete_addl4","create","create","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","domain","drop","drop","drop","drop","dummy_lookup_values","emull","endo","endomul_scalar8","eval_vanishes_on_last_4_rows","eval_zk_polynomial","evaluate","fmt","fmt","fmt","fr_sponge_params","from","from","from","from","gates","generic4","genericm","gnrc_lnrz","gnrc_quot","gnrc_scalars","init","init","init","init","into","into","into","into","l04","l08","l1","lookup_constraint_system","lookup_selectors","lookup_tables","lookup_tables8","lookup_used","max_joint_size","max_lookups_per_row","mull8","new","perm_aggreg","perm_lnrz","perm_quot","perm_scalars","ps8","psm","public","serialize","serialize","shift","shifts","sid","sigmal1","sigmal8","sigmam","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vanishes_on_last_4_rows","vanishes_on_last_4_rows","verify","verify_generic","vzip","vzip","vzip","vzip","zero4","zero8","zk_polynomial","zk_w3","zkpl","zkpm","0","0","1","err","row","EvaluationDomains","borrow","borrow_mut","clone","clone_into","create","d1","d2","d4","d8","deref","deref_mut","deserialize","drop","fmt","from","init","into","serialize","to_owned","try_from","try_into","type_id","vzip","Add","Add","Add","Alpha","Alpha","Beta","Beta","BinOp","Cache","Cache","CacheId","Cell","Cell","Coefficient","Column","Constant","ConstantExpr","Constants","Double","Dup","E","EndoCoefficient","EndoCoefficient","Environment","Expr","Gamma","Gamma","Index","JointCombiner","JointCombiner","Linearization","Literal","Literal","Load","LookupAggreg","LookupEnvironment","LookupKindIndex","LookupSorted","LookupTable","Mds","Mds","Mul","Mul","Mul","Op2","PolishToken","Pow","Pow","Pow","Square","Store","Sub","Sub","Sub","UnnormalizedLagrangeBasis","UnnormalizedLagrangeBasis","VanishesOnLast4Rows","VanishesOnLast4Rows","Variable","Witness","Z","add","add","add_assign","aggreg","alpha","beta","beta","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache","cell","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","coeff","coefficient","col","combine_constraints","constant","constant_term","constants","constraints","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","domain","double","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","endo_coefficient","eq","eq","eq","eq","eq","eq","eq","evaluate","evaluate","evaluate","evaluate_","evaluate_constants","evaluate_constants","evaluations","evaluations","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gamma","get_hash","get_hash","get_hash","hash","hash","hash","index","index","index_terms","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","is_one","is_one","is_zero","is_zero","joint_combiner","l0_1","l0_1","linearize","literal","lookup","map","mds","mul","mul","ne","ne","ne","ne","ne","ne","neg","neg","one","one","partial_cmp","partial_cmp","partial_cmp","pow","pow","pows","prologue","row","selectors","serialize","serialize","serialize","serialize","sorted","square","sub","sub","table","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_polish","to_polynomial","to_polynomial","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vanishes_on_last_4_rows","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","witness","witness","witness_curr","witness_next","z","zero","zero","0","0","0","0","0","0","0","0","0","0","1","1","1","1","col","row","0","0","0","0","0","0","0","0","1","1","1","2","0","0","0","0","0","col","row","boolean","ChaCha0","ChaCha1","ChaCha2","ChaChaFinal","CircuitGate","CompleteAdd","Curr","CurrOrNext","EndoMul","EndoMulScalar","GateLookupTable","GateType","GatesLookupMaps","GatesLookupSpec","Generic","Joint","JointLookup","LocalPosition","LookupInfo","LookupTable","LookupsUsed","Next","Poseidon","Single","SingleLookup","VarBaseMul","Xor","Zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_row","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","coeffs","column","combine_table_entry","create","create_endomul","create_generic","create_generic_gadget","create_poseidon","create_poseidon_gadget","create_vbmul","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","endomul","entry","eq","eq","eq","evaluate","evaluate","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_i64","from_u64","gate_lookup_table","gate_positions","gate_selector_map","gate_table_map","get_hash","get_hash","get_hash","get_table","hash","hash","hash","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","kinds","kinds_map","kinds_tables","lookup_kinds","lookup_kinds_map","lookup_used","max_joint_size","max_per_row","partial_cmp","partial_cmp","ps","rc","row","selector_polynomials_and_tables","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shift","table_id","to_i64","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_u64","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vbmul","verify","verify_complete_add","verify_endomul","verify_endomul_scalar","verify_generic","verify_poseidon","verify_vbmul","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wires","write","zero","endosclmul","poseidon","varbasemul","POS_ROWS_PER_HASH","ROUNDS_PER_HASH","ROUNDS_PER_ROW","SPONGE_WIDTH","STATE_ORDER","round_to_cols","LookupEvals","LookupPolys","LookupShifts","WitnessEvals","WitnessOverDomains","WitnessShifts","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","d4","d8","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","h1","h1","h2","h2","init","init","init","init","init","init","into","into","into","into","into","into","l","l","lw","lw","next","next","this","this","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","w","z","chacha","complete_add","endomul_scalar","endosclmul","generic","lookup","permutation","poseidon","varbasemul","CONSTRAINTS_0","CONSTRAINTS_1","CONSTRAINTS_2","CONSTRAINTS_FINAL","constraint_chacha0","constraint_chacha1","constraint_chacha2","constraint_chacha_final","testing","xor_table","chacha20","chacha20_gates","chacha20_rows","CONSTRAINTS","constraint","CONSTRAINTS","constraint","gen_witness","CONSTRAINTS","EndoMulResult","acc","borrow","borrow_mut","constraint","constraints","deref","deref_mut","drop","from","gen_witness","init","into","n","try_from","try_into","type_id","vzip","Add","CONSTRAINTS","Const","GENERIC_COEFFS","GENERIC_REGISTERS","GenericGateSpec","Mul","Pub","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","testing","try_from","try_into","type_id","vzip","0","left_coeff","mul_coeff","output_coeff","output_coeff","right_coeff","create_circuit","fill_in_witness","0","0","CONSTRAINTS","CombinedEntry","Entry","Field","Params","UncombinedEntry","ZK_ROWS","aggregation","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","constraints","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","evaluate","evaluate","evaluate","fmt","fmt","from","from","get_hash","get_hash","hash","hash","init","init","into","into","ne","ne","partial_cmp","partial_cmp","sorted","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify","vzip","vzip","zk_patch","CONSTRAINTS","CONSTRAINTS","ROUND_EQUATIONS","RoundEquation","borrow","borrow_mut","constraint","deref","deref_mut","drop","from","init","into","source","target","try_from","try_into","type_id","vzip","CONSTRAINTS","VarbaseMulResult","acc","borrow","borrow_mut","constraint","deref","deref_mut","drop","from","init","into","n","try_from","try_into","type_id","vzip","witness","LookupEvaluations","ProofEvaluations","RandomOracles","aggreg","alpha","alpha_chal","beta","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","combine","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","dummy_with_witness_evaluations","fmt","from","from","from","gamma","generic_selector","init","init","init","into","into","into","joint_combiner","lookup","poseidon_selector","s","sorted","table","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","u","u_chal","v","v_chal","vzip","vzip","vzip","w","z","zeta","zeta_chal","COLUMNS","GateWires","PERMUTS","WIRES","Wire","borrow","borrow_mut","clone","clone_into","col","deref","deref_mut","deserialize","drop","eq","fmt","from","init","into","ne","new","read","row","serialize","to_owned","try_from","try_into","type_id","vzip","write","NoRoomForZkInWitness","OpenProof","Permutation","ProofError","Prover","Result","ValueNotInTable","WitnessCsInconsistent","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","fmt","from","init","into","to_owned","to_string","try_from","try_into","type_id","vzip","0","0","Index","LookupVerifierIndex","VerifierIndex","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chacha_comm","coefficients_comm","complete_add_comm","constraints_expr","create","cs","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","domain","drop","drop","drop","emul_comm","endo","endomul_scalar_comm","expr_linearization","fmt","fq_sponge_params","fq_sponge_params","fr_sponge_params","from","from","from","from_file","generic_comm","init","init","init","into","into","into","linearization","linearization","linearization_columns","lookup_index","lookup_selectors","lookup_tables","lookup_used","max_poly_size","max_poly_size","max_quot_size","max_quot_size","mul_comm","powers_of_alpha","powers_of_alpha","psm_comm","serialize","serialize","serialize","shift","sigma_comm","srs","srs","to_file","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verifier_index","vzip","vzip","vzip","w","zkpm","FrSponge","absorb","absorb_evaluations","challenge","new","LookupCommitments","ProverCommitments","ProverProof","aggreg","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","commitments","create","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","evals","from","from","from","ft_eval1","init","init","init","into","into","into","lookup","oracles","prev_chal_evals","prev_challenges","proof","public","sorted","t_comm","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","w_comm","z_comm","OraclesResult","all_alphas","borrow","borrow_mut","combined_inner_product","deref","deref_mut","digest","drop","fq_sponge","from","ft_eval0","init","into","oracles","p_eval","polys","powers_of_eval_points_for_chunks","try_from","try_into","type_id","vzip","zeta1"],"q":["kimchi","","","","","","","","kimchi::alphas","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::bench","","","","","","","","","","","","","","","","","kimchi::circuits","","","","","","","","","","kimchi::circuits::constraints","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::constraints::GateError","","","","","kimchi::circuits::domains","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::exprkimchi::circuits::expr::Column","","","","","kimchi::circuits::expr::ConstantExpr","","","","","","","","","","","kimchi::circuits::expr::Expr","","","","","","","","","","","","kimchi::circuits::expr::PolishToken","","","","","","","kimchi::circuits::expr::constraints","kimchi::circuits::gatekimchi::circuits::gates","","","kimchi::circuits::gates::poseidon","","","","","","kimchi::circuits::polynomial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::polynomials","","","","","","","","","kimchi::circuits::polynomials::chacha","","","","","","","","","","kimchi::circuits::polynomials::chacha::testing","","","kimchi::circuits::polynomials::complete_add","","kimchi::circuits::polynomials::endomul_scalar","","","kimchi::circuits::polynomials::endosclmul","","","","","","","","","","","","","","","","","","","kimchi::circuits::polynomials::generic","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::polynomials::generic::GenericGateSpec","","","","","","kimchi::circuits::polynomials::generic::testing","","kimchi::circuits::polynomials::lookup","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::polynomials::permutation","kimchi::circuits::polynomials::poseidon","","","","","","","","","","","","","","","","","","kimchi::circuits::polynomials::varbasemul","","","","","","","","","","","","","","","","","","kimchi::circuits::scalars","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::wires","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::error","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::error::ProofError","","kimchi::index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::plonk_sponge","","","","","kimchi::prover","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::verifier","","","","","","","","","","","","","","","","","","","","","",""],"d":["This module implements an abstraction to keep track of the …","","","This module implements the ProofError type.","This module implements Plonk Protocol Index primitive.","","This module implements prover’s zk-proof primitive.","This module implements zk-proof batch verifier …","This type can be constructed from Builder and a value <code>alpha</code>…","This type can be used to create a mapping between powers …","A constraint type represents a polynomial that will be …","gates in the PLONK constraint system. As gates are …","The lookup argument","Wrapper around an iterator that warns you if not consumed …","The permutation argument","","","","","","","","","","","","","","","","","","","","","","","","As the new expression framework does not make use of …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","This function allows us to retrieve the powers of alpha, …","","This returns a range of powers (the exponents), …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Creates a new instance of Alphas via a Builder and value …","","Registers a new ConstraintType, associating it with a …","","","","","","","","","","","","","","","","","","","","","","the circuit size. This influences the size of the SRS","","","","Produces a proof","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","This will create a context that allows for benchmarks of …","","","","","This module implements Plonk circuit constraint primitive.","","","This module implements Plonk constraint gate primitive.","","","This module implements Plonk prover polynomials primitive.","","This module implements Plonk prover polynomial evaluations …","This module implements Plonk circuit gate wires primitive.","","A specific gate did not verify correctly","Some connected wires have different values","Represents an error found when verifying a witness with a …","A public gate was incorrectly connected","","Shifts represent the shifts required in the permutation …","","","","","","","","","","ChaCha indexes","","","","","coefficients polynomials in evaluation form","EC point addition selector evaluations w over domain.d4","","creates a constraint system from a vector of gates (…","","","","","","","","","","","evaluation domains","","","","","Lookup tables","endoscalar multiplication selector evaluations over …","coefficient for the group endomorphism","EC point addition selector evaluations w over domain.d8","Evaluates the polynomial (x - w^{n - 4}) (x - w^{n - 3}) * …","Evaluates the polynomial (x - w^{n - 3}) * (x - w^{n - 2}) …","evaluate witness polynomials over domains","","","","random oracle argument parameters","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","circuit gates","multiplication evaluations over domain.d4","","generic constraint linearization poly contribution …","generic constraint quotient poly contribution computation","produces alpha * generic(zeta) * w0 * w1, alpha * …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","0-th Lagrange evaluated over domain.d4","0-th Lagrange evaluated over domain.d8","1-st Lagrange evaluated over domain.d8","lookup constraint system","Lookup selectors: For each kind of lookup-pattern, we have …","","","The kind of lookups used","The maximum number of elements in a vector lookup","The maximum number of lookups per row","scalar multiplication selector evaluations over domain.d8","Generates the shifts for a given domain","permutation aggregation polynomial computation","permutation linearization poly contribution computation","permutation quotient poly contribution computation","","poseidon selector over domain.d8","poseidon constraint selector polynomial","number of public inputs","","","wire coordinate shifts","retrieve the shifts","SID polynomial","permutation polynomial array evaluations over domain d1","permutation polynomial array evaluations over domain d8","permutation polynomial array","","","","","","","","","","","","","","","The polynomial (x - w^{n - 4}) (x - w^{n - 3}) * (x - w^{n …","the polynomial that vanishes on the last four rows","This function verifies the consistency of the wire …","Function to verify the generic polynomials with a witness.","","","","","zero evaluated over domain.d8","zero evaluated over domain.d8","Computes the zero-knowledge polynomial for blinding the …","Returns the end of the circuit, which is used for …","zero-knowledge polynomial over domain.d8","zero-knowledge polynomial","","","","","","","","","","","Creates 4 evaluation domains <code>d1</code> (of size <code>n</code>), <code>d2</code> (of size <code>2n</code>…","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","A cache","","A key for a cached value","","","","A type representing one of the polynomials involved in the …","","An arithmetic expression over","The collection of constants required to evaluate an <code>Expr</code>.","","","An alias for the intended usage of the expression type in …","","","The collection of polynomials (all in evaluation form) and …","An multi-variate polynomial over the base ring <code>C</code> with …","","","","","","A “linearization”, which is linear combination with <code>E</code> …","","","","","The polynomials specific to the lookup argument.","","","","","","","","","A binary operation","For efficiency of evaluation, we compile expressions to …","","","","","","","","","UnnormalizedLagrangeBasis(i) is (x^n - 1) / (x - omega^i)","","","","A type representing a variable which can appear in a …","","","","","","The lookup aggregation polynomials.","The challenge alpha from the PLONK IOP.","The expression <code>beta</code>.","The challenge beta from the PLONK IOP.","","","","","","","","","","","","","","","","","","","","","","","","","Cache the value of the given expression","Convenience function for constructing cell variables.","","","","","","","","","","","","","","","","","","","","","The coefficient column polynomials","The column of this variable","Combines multiple constraints <code>[c0, ..., cn]</code> into a single …","Convenience function for constructing constant expressions.","","Constant values required","A number of useful constraints","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The domains used in the PLONK argument.","","","","","","","","","","","","","","The endomorphism coefficient","","","","","","","","Evaluate an expression into a field element.","Evaluate an expression as a field element against an …","Evaluate an RPN expression to a field element.","Evaluate an expression as a field element against the …","Evaluate the constant expressions in this expression down …","Evaluate the constants in a linearization with …","Compute the polynomial corresponding to this expression, …","Compute the polynomial corresponding to this expression, …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","The challenge gamma from the PLONK IOP.","","","","","","","Handy function to quickly create an expression for a gate.","The index selector polynomials.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","The challenge joint_combiner which is used to combine …","Computes <code>prod_{j != 1} (1 - omega^j)</code>","The value <code>prod_{j != 1} (1 - omega^j)</code>, used for efficiently","There is an optimization in PLONK called “linearization…","Convenience function for constructing expressions from …","Lookup specific polynomials","Apply a function to all the coefficients in the …","The MDS matrix","","","","","","","","","","","","","","","","Exponentiate a constant expression.","Exponentiate an expression","Compute the powers of <code>x</code>, <code>x^0, ..., x^{n - 1}</code>","You can import this module like …","The row (Curr of Next) of this variable","The lookup-type selector polynomials.","","","","","The sorted lookup table polynomials.","","","","The evaluations of the combined lookup table polynomial.","","","","","","","","","Compile an expression to an RPN expression.","Given a linearization and an environment, compute the …","Given a linearization and an environment, compute the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Evaluate the given constant expression to a field element.","The polynomial which vanishes on the last 4 elements of …","","","","","","","","","","","","","Handy function to quickly create an expression for a …","The witness column polynomials","Same as witness but for the next row.","Same as witness but for the next row.","The permutation aggregation polynomial.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a constraint to enforce that b is either 0 or 1.","ChaCha","","","","","Complete EC addition in Affine form","","A row accessible from a given row, corresponds to the fact …","EC variable base scalar multiplication with group …","Gate for computing the scalar corresponding to an …","Enumerates the different ‘fixed’ lookup tables used by …","The different types of gates the system supports. Note …","Specifies mapping from positions defined relative to gates …","Specifies the relative position of gates and the fixed …","Generic arithmetic gate","","A spec for checking that the given vector belongs to a …","A position in the circuit relative to a given row.","Describes the desired lookup configuration.","","Specifies whether a constraint system uses joint lookups. …","","Poseidon permutation gate","","Look up a single value in a lookup table. The value may be …","EC variable base scalar multiplication","","Zero gate","","","","","","","","","","","","","","","","","","","","","","","For each row in the circuit, which lookup-constraints …","","","","","","","","","","","","","","","","","","","","","public selector polynomials that can used as handy …","","Let’s say we want to do a lookup in a “vector-valued”…","Create the default lookup configuration.","","This allows you to create two generic gates that will fit …","This allows you to create two generic gates by passing the …","","…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Evaluate the linear combination specifying the lookup …","Evaluate the combined value of a joint-lookup.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","The fixed lookup table that should be used for these …","The set of positions relative to an active gate where a …","Enumerates the selector that should be active for a …","Enumerates the fixed tables that should be used for …","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A single lookup constraint is a vector of lookup …","A map from the kind of gate (and whether it is the current …","A map from the kind of gate (and whether it is the current …","Which lookup-patterns should be applied on which rows. …","","Check what kind of lookups, if any, are used by this …","The maximum joint size of any joint lookup in a constraint …","The maximum length of an element of <code>kinds</code>. This can be …","","","","round constant that are relevant for this specific gate","","Each entry in <code>kinds</code> has a corresponding selector …","","","","","","","","","","Compute the offset corresponding to the <code>CurrOrNext</code> value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","type of the gate","","","","","","","","","","","","Linear combination of local-positions","","This function verifies the consistency of the wire …","Check the correctness of witness values for a complete-add …","","","verifies that the generic gate constraints are solved by …","Checks if a witness verifies a poseidon gate","","","","","","","","","","","","","gate wiring (for each cell, what cell it is wired to)","","this function creates “empty” circuit gate","This module implements group endomorphism optimised …","This module implements Posedon constraint gate Plonk …","This module implements short Weierstrass curve variable …","Number of PLONK rows required to implement Poseidon","Number of rounds","Number of rows","Width of the sponge","The order in a row in which we store states before and …","Given a Poseidon round from 0 to 4 (inclusive), returns …","","","","Evaluations of the wires and permutation","","","","","","","","","","","","","","","","","","","","","","","","","","","evaluations over domain d4","evaluations over domain d8","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","lookup multiset","lookup multiset","lookup multiset","lookup multiset","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","aggregation","aggregation","lookup witness","lookup witness","next wire evaluations","next wire evaluations","this wire evaluations","this wire evaluations","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","wire evaluations","permutation evaluations","This module implements the cha-cha constraints, which are …","This implements a complete EC addition gate. The layout is","","This module implements short Weierstrass curve …","This module implements the double generic gate, which …","This module implements the arithmetization of plookup …","This module implements permutation constraint polynomials.","This module implements the Poseidon constraint polynomials.","This module implements short Weierstrass curve variable …","Number of constraints produced by the ChaCha0 gate.","Number of constraints produced by the ChaCha1 gate.","Number of constraints produced by the ChaCha2 gate.","Number of constraints produced by the ChaChaFinal gate.","a += b; d ^= a; d &lt;&lt;&lt;= 16 (=4*4)","c += d; b ^= c; b &lt;&lt;&lt;= 12 (=3*4)","a += b; d ^= a; d &lt;&lt;&lt;= 8  (=2*4)","The last line, namely, c += d; b ^= c; b &lt;&lt;&lt;= 7; is …","","The lookup table for 4-bit xor. Note that it is …","","This is just for tests. It doesn’t set up the …","","Number of constraints produced by the gate.","This function uses the constraints","Number of constraints produced by the gate.","The constraint for the endomul scalar computation","","Number of constraints produced by the gate.","The result of performing an endoscaling: the accumulated …","","","","The combined constraint for endoscaling.","The constraints for endoscaling.","","","","Returns the argument unchanged.","Generates the witness_curr values for a series of …","","Calls <code>U::from(self)</code>.","","","","","","Add two values.","Number of constraints produced by the gate.","A constant, the constructor contains the constant itself","Number of coefficients used by a single generic gate Three …","Number of generic of registers by a single generic gate","The different type of computation that are possible with a …","Multiplication of two values","A public gate","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Optional coefficient that can be multiplied with the left …","Optional coefficient that can be multiplied with the …","Optional coefficient that can be multiplied with the …","Optional coefficient that can be multiplied with the …","Optional coefficient that can be multiplied with the right …","function to create a generic circuit","","","","Number of constraints produced by the argument.","","","","","","The number of random values to append to columns for …","Computes the aggregation polynomial for maximum n lookups …","","","","","","","","","","","Specifies the lookup constraints as expressions.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Computes the sorted lookup tables required by the lookup …","","","","","","","","","Checks that all the lookup constraints are satisfied.","","","Pad with zeroes and then add 3 random elements in the last …","Number of constraints produced by the argument.","Number of constraints produced by the gate.","","An equation of the form <code>(curr | next)[i] = round(curr[j])</code>","","","Poseidon quotient poly contribution computation …","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Number of constraints produced by the gate.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","lookup aggregation polynomial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","evaluation of the generic selector polynomial","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","lookup-related evaluations","evaluation of the poseidon selector polynomial","permutation polynomials (PERMUTS-1 evaluations because the …","sorted lookup table polynomial","lookup table polynomial","","","","","","","","","","","","","","","","","","","","witness polynomials","permutation polynomial","","","Number of registers","GateWires document the wiring of a gate. More …","Number of registers that can be wired (participating in …","index of all registers","Wire documents the other cell that is wired to this one. …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Creates a new set of wires for a given row.","","","","","","","","","","","","","","","The result of a proof creation or verification.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","The index used by the prover","The verifier index","","","","","","","","Chacha polynomial commitments","coefficient commitment array","EC addition selector polynomial commitment","","this function compiles the index from constraints","constraints system polynomials","","","","","","","","","","evaluation domain","","","","endoscalar multiplication selector polynomial commitment","endoscalar coefficient","endoscalar multiplication scalar computation selector …","","","random oracle argument parameters","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserializes a VerifierIndex from a file, given a pointer …","coefficient commitment array","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The symbolic linearization of our circuit, which can …","","","","","","","maximal size of polynomial section","maximal size of polynomial section","maximal size of the quotient polynomial according to the …","maximal size of the quotient polynomial according to the …","EC variable base scalar multiplication selector polynomial …","The mapping between powers of alpha and constraints","The mapping between powers of alpha and constraints","poseidon constraint selector polynomial commitment","","","","wire coordinate shifts","permutation commitment array","polynomial commitment keys","polynomial commitment keys","Writes a VerifierIndex to a file, potentially appending it …","","","","","","","","","","","","","","domain offset for zero-knowledge","zero-knowledge polynomial","","","","","","","","","","","","","","","","","","","","","","All the polynomial commitments required in the proof","This function constructs prover’s zk-proof from the …","","","","","","","","","","Two evaluations over a number of committed polynomials","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Required evaluation for Maller’s optimization (see …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Commitments related to the lookup argument","This function runs the random oracle argument","","The challenges underlying the optional polynomials folded …","batched commitment opening proof","The public input","","The commitment to the quotient polynomial","","","","","","","","","","","","","This function verifies the batch of zk-proofs proofs: …","","","","The commitments to the witness (execution trace)","The commitment to the permutation polynomial","The result of running the oracle protocol","the computed powers of alpha","","","?","","","the last evaluation of the Fq-Sponge in this protocol","","A sponge that acts on the base field of a curve","Returns the argument unchanged.","The evaluation f(zeta) - t(zeta) * Z_H(zeta)","","Calls <code>U::from(self)</code>.","the challenges produced in the protocol","public polynomial evaluations","?","zeta^n and (zeta * omega)^n","","","","","pre-computed zeta^n"],"i":[0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,2,1,3,4,2,1,3,4,1,3,1,3,3,2,1,3,4,2,1,3,4,1,3,2,2,1,3,4,4,1,1,3,4,2,1,3,4,2,1,2,1,2,1,3,4,2,1,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,4,3,1,3,1,3,2,1,3,4,2,1,3,4,2,1,3,4,2,1,3,4,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,6,6,0,6,0,0,0,7,8,9,6,7,8,9,6,9,8,9,8,9,9,9,8,9,7,8,9,6,7,8,9,6,8,9,9,7,8,9,6,8,9,9,9,0,0,9,8,9,6,9,7,8,9,6,9,9,9,9,9,9,7,8,9,6,7,8,9,6,9,9,9,9,8,8,8,8,8,8,9,7,9,9,9,9,9,9,9,8,9,9,7,9,9,9,9,8,9,7,8,9,6,7,8,9,6,7,8,9,6,0,9,9,9,7,8,9,6,9,9,0,0,9,9,10,11,10,12,12,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,15,16,14,16,14,16,17,0,17,0,17,16,18,0,17,0,0,17,16,0,14,16,0,0,14,16,18,14,16,0,14,16,16,18,0,18,18,18,14,16,14,15,16,0,0,14,17,16,17,16,14,15,16,17,16,17,16,0,18,18,14,17,17,19,20,17,20,20,19,21,18,22,14,23,24,15,17,16,25,20,19,21,18,22,14,23,24,15,17,16,25,24,17,18,22,14,23,15,17,16,25,18,22,14,23,15,17,16,25,18,22,23,0,21,22,17,17,25,21,0,24,25,20,19,21,18,22,14,23,24,15,17,16,25,20,19,21,18,22,14,23,24,15,17,16,25,18,22,16,25,21,17,20,19,21,18,22,14,23,24,15,17,16,25,20,18,22,14,23,15,17,16,17,17,16,17,17,25,17,17,18,22,22,14,14,23,15,17,17,16,25,20,19,21,18,22,14,23,24,15,17,17,17,16,25,20,18,22,23,18,22,23,0,21,25,20,19,21,18,22,14,23,24,15,17,16,25,20,19,21,18,22,14,23,24,15,17,16,25,14,17,14,17,20,0,21,17,17,21,25,20,14,17,18,22,14,23,17,16,14,17,14,17,18,22,23,14,17,0,0,22,19,18,22,16,25,19,17,14,17,19,18,22,14,23,15,17,16,25,17,25,25,22,14,17,20,19,21,18,22,14,23,24,15,17,16,25,20,19,21,18,22,14,23,24,15,17,16,25,20,19,21,18,22,14,23,24,15,17,16,25,14,21,20,19,21,18,22,14,23,24,15,17,16,25,0,21,0,0,21,14,17,26,27,28,29,30,31,32,33,34,35,32,33,34,35,36,36,37,38,39,40,41,42,43,44,41,43,44,41,45,46,47,48,49,50,50,0,51,51,51,51,0,51,52,0,51,51,0,0,0,0,51,53,0,0,0,0,0,52,51,53,0,51,54,51,55,56,52,57,58,59,51,60,53,54,61,55,56,52,57,58,59,51,60,53,54,61,60,52,57,58,59,51,60,53,54,61,52,57,58,59,51,60,53,54,61,52,51,61,57,0,60,61,61,61,61,61,61,55,56,52,57,58,59,51,60,53,54,61,55,56,52,57,58,59,51,60,53,54,61,52,57,58,59,51,60,53,54,61,55,56,52,57,58,59,51,60,53,54,61,61,59,52,51,54,58,59,52,57,51,53,54,61,55,56,52,57,58,59,51,60,53,54,61,51,51,55,55,56,56,52,51,54,0,52,51,54,55,56,52,57,58,59,51,60,53,54,61,55,56,52,57,58,59,51,60,53,54,61,60,60,60,51,51,60,60,60,52,51,61,61,57,60,52,57,58,59,51,60,53,54,61,52,59,51,52,57,58,59,51,60,53,54,61,51,55,56,52,57,58,59,51,60,53,54,61,55,56,52,57,58,59,51,60,53,54,61,61,55,56,52,57,58,59,51,60,53,54,61,58,61,61,61,61,61,61,61,61,55,56,52,57,58,59,51,60,53,54,61,61,61,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,63,64,65,66,67,62,63,64,65,66,67,62,63,64,65,66,67,62,63,64,65,66,67,64,64,62,63,64,65,66,67,62,63,64,65,66,67,62,63,64,65,66,67,62,63,64,65,66,67,65,67,65,67,62,63,64,65,66,67,62,63,64,65,66,67,65,67,65,67,63,66,63,66,62,63,64,65,66,67,62,63,64,65,66,67,62,63,64,65,66,67,62,63,64,65,66,67,62,63,64,65,66,67,62,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,68,68,0,0,68,68,68,68,0,68,68,68,68,68,68,68,69,0,69,0,0,0,69,69,69,69,69,69,69,69,69,69,0,69,69,69,69,70,71,72,71,72,71,0,0,73,74,0,0,0,75,75,0,0,0,73,74,73,74,73,74,73,74,73,74,0,73,74,73,74,73,74,73,74,75,73,74,73,74,73,74,73,74,73,74,73,74,73,74,73,74,73,74,0,73,74,73,74,73,74,73,74,0,73,74,0,0,0,0,0,76,76,0,76,76,76,76,76,76,76,76,76,76,76,76,0,0,77,77,77,0,77,77,77,77,77,77,77,77,77,77,77,0,0,0,0,78,79,79,79,78,80,79,78,80,79,78,80,79,78,80,79,80,79,78,80,79,78,80,79,78,80,79,80,79,78,80,79,79,80,78,80,79,78,80,79,79,80,80,80,78,78,78,80,79,78,80,79,78,80,79,78,80,79,79,79,79,79,78,80,79,80,80,79,79,0,0,0,0,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,82,82,82,0,82,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,83,84,0,0,0,85,86,87,85,86,87,87,87,87,0,85,85,85,86,87,85,86,87,85,86,87,87,85,86,87,87,87,87,0,85,85,87,87,85,86,87,87,87,85,86,87,85,86,87,85,87,0,87,86,86,86,85,87,85,87,87,85,87,87,85,86,87,87,87,85,87,87,85,86,87,85,86,87,85,86,87,85,85,86,87,87,87,0,88,88,88,88,0,0,0,89,89,90,91,89,90,91,89,90,91,89,90,91,91,91,89,90,91,89,90,91,89,90,91,91,89,90,91,91,89,90,91,89,90,91,90,91,91,91,91,91,89,90,89,90,91,89,90,91,89,90,91,89,90,91,91,89,90,91,90,90,0,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["constrainttype",4]],[[["",0]],["builder",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["builder",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],[[["",0],["constrainttype",4]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0]]],[[["usize",0]]],[[["",0],["constrainttype",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["",0],["constrainttype",4],["usize",0]],["mustconsumeiterator",3,[["cloned",3,[["take",3,[["iter",3]]]]]]]],[[["",0],["",0]],["u64",0]],[[["",0],["constrainttype",4],["usize",0]],["mustconsumeiterator",3,[["take",3,[["range",3,[["usize",0]]]]],["usize",0]]]],[[["",0],["",0]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["builder",3]],["alphas",3]],[[["",0]],["option",4]],[[["",0],["constrainttype",4],["usize",0]],["range",3,[["usize",0]]]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],null,null,[[["",0],["vec",3,[["proverproof",3,[["affine",6]]]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["proverproof",3,[["affine",6]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[["usize",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["lookupconstraintsystem",3]],[[["",0]],["constraintsystem",3]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[["vec",3,[["vec",3,[["vec",3]]]]],["evaluationdomains",3]],["option",4]],[[["vec",3,[["circuitgate",3]]],["vec",3,[["vec",3,[["vec",3]]]]],["arithmeticspongeparams",3],["usize",0]],["option",4]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],null,[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],null,null,null,null,[[["d",3,[["fftfield",8]]],["fftfield",8]],["fftfield",8]],[[["d",3,[["fftfield",8]]],["fftfield",8]],["fftfield",8]],[[["",0],["dp",3]],["witnessoverdomains",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],null,null,null,[[["",0]],["evaluations",3,[["d",3]]]],[[["",0]],["evaluations",3,[["d",3]]]],[[],["vec",3]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[["d",3]]],[[["",0],["",0],["",0]],["result",6,[["densepolynomial",3]]]],[[["",0]],["densepolynomial",3]],[[["",0],["witnessoverdomains",3],["densepolynomial",3]],["result",6]],[[]],null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],null,[[["",0]]],null,null,null,null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["d",3,[["fftfield",8]]]],["dp",3,[["fftfield",8]]]],null,[[["",0]],["result",4,[["gateerror",4]]]],[[["",0],["densepolynomial",3]],["bool",0]],[[]],[[]],[[]],[[]],null,null,[[["d",3,[["fftfield",8]]]],["dp",3,[["fftfield",8]]]],[[["d",3,[["fftfield",8]]]],["fftfield",8]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["evaluationdomains",3]],[[["",0],["",0]]],[[["usize",0]],["option",4]],null,null,null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0]],["result",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["",0]]],null,null,[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["expr",4]],["expr",4]],[[["column",4],["currornext",4]],["expr",4]],[[["",0]],["column",4]],[[["",0]],["variable",3]],[[["",0]],["constantexpr",4]],[[["",0]],["cacheid",3]],[[["",0]],["op2",4]],[[["",0]],["expr",4]],[[["",0]],["polishtoken",4]],[[["",0]],["linearization",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["column",4]],["ordering",4]],[[["",0],["variable",3]],["ordering",4]],[[["",0],["cacheid",3]],["ordering",4]],[[["usize",0]],["e",6]],null,null,[[["vec",3]]],[[],["expr",4]],null,null,null,[[],["cache",3]],[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],null,[[["",0],["column",4]],["bool",0]],[[["",0],["variable",3]],["bool",0]],[[["",0],["constantexpr",4]],["bool",0]],[[["",0],["cacheid",3]],["bool",0]],[[["",0],["op2",4]],["bool",0]],[[["",0],["expr",4]],["bool",0]],[[["",0],["polishtoken",4]],["bool",0]],[[["",0],["d",3]],["result",4,[["str",0]]]],[[["",0],["d",3],["environment",3]],["result",4,[["str",0]]]],[[["d",3],["constants",3]],["result",4,[["str",0]]]],[[["",0],["d",3],["constants",3]],["result",4,[["str",0]]]],[[["",0],["environment",3]],["expr",4]],[[["",0],["environment",3]],["linearization",3,[["expr",4]]]],[[["",0],["environment",3]],["evaluations",3,[["d",3]]]],[[["",0],["environment",3]],["evaluations",3,[["d",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",0]]],[[]],[[["u64",0]]],[[]],[[]],null,[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["gatetype",4]],["e",6]],null,null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],null,[[["d",3,[["fftfield",8]]]],["fftfield",8]],null,[[["",0],["hashset",3,[["column",4]]]],["result",4,[["linearization",3,[["expr",4]]],["str",0]]]],[[]],null,[[["",0],["fn",8]],["linearization",3]],null,[[]],[[]],[[["",0],["column",4]],["bool",0]],[[["",0],["variable",3]],["bool",0]],[[["",0],["constantexpr",4]],["bool",0]],[[["",0],["cacheid",3]],["bool",0]],[[["",0],["expr",4]],["bool",0]],[[["",0],["polishtoken",4]],["bool",0]],[[],["constantexpr",4]],[[],["expr",4]],[[]],[[]],[[["",0],["column",4]],["option",4,[["ordering",4]]]],[[["",0],["variable",3]],["option",4,[["ordering",4]]]],[[["",0],["cacheid",3]],["option",4,[["ordering",4]]]],[[["usize",0]]],[[["usize",0]]],[[["field",8],["usize",0]],["vec",3,[["field",8]]]],null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,[[]],[[]],[[]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["vec",3,[["polishtoken",4]]]],[[["",0],["environment",3]]],[[["",0],["environment",3]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["constants",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",0],["currornext",4]],["e",6]],null,[[["usize",0]],["e",6]],[[["usize",0]],["e",6]],null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["e",6]],["e",6,[["field",8]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["vec",3,[["vec",3]]]],[[["",0]],["currornext",4]],[[["",0]],["localposition",3]],[[["",0]],["singlelookup",3]],[[["",0]],["jointlookup",3]],[[["",0]],["gatetype",4]],[[["",0]],["lookupinfo",3]],[[["",0]],["lookupsused",4]],[[["",0]],["gatelookuptable",4]],[[["",0]],["circuitgate",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["currornext",4]],["ordering",4]],[[["",0],["gatetype",4]],["ordering",4]],null,null,[[["field",8],["doubleendediterator",8]],["field",8]],[[]],[[["gatewires",6]]],[[["gatewires",6]]],[[["gatewires",6],["genericgatespec",4],["option",4,[["genericgatespec",4]]]]],[[["gatewires",6]]],[[["usize",0]]],[[],["vec",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0]]],null,[[["",0],["currornext",4]],["bool",0]],[[["",0],["gatetype",4]],["bool",0]],[[["",0],["gatelookuptable",4]],["bool",0]],[[["",0],["fn",8]]],[[["",0],["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i64",0]],["option",4]],[[["u64",0]],["option",4]],null,null,null,null,[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["gatelookuptable",4]],["lookuptable",6,[["fftfield",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[["vec",3,[["gateslookupspec",3]]]],["gateslookupmaps",3]],[[["",0]],["option",4,[["lookupsused",4]]]],null,null,[[["",0],["currornext",4]],["option",4,[["ordering",4]]]],[[["",0],["gatetype",4]],["option",4,[["ordering",4]]]],[[["",0]]],[[["",0]]],null,[[["",0],["evaluationdomains",3]]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["usize",0]],null,[[["",0]],["option",4,[["i64",0]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["option",4,[["u64",0]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0]]],[[["",0],["usize",0],["constraintsystem",3]],["result",4,[["string",3]]]],[[["",0],["usize",0]],["result",4,[["string",3]]]],[[["",0],["usize",0],["constraintsystem",3]],["result",4,[["string",3]]]],[[["",0],["usize",0],["constraintsystem",3]],["result",4,[["string",3]]]],[[["",0],["usize",0]],["result",4,[["string",3]]]],[[["",0],["usize",0],["constraintsystem",3]],["result",4,[["string",3]]]],[[["",0],["usize",0]],["result",4,[["string",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["",0],["write",8]],["ioresult",6]],[[["gatewires",6]]],null,null,null,null,null,null,null,null,[[["usize",0]],["range",3,[["usize",0]]]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["witnessevals",3]],[[["",0]],["witnessshifts",3]],[[["",0]],["witnessoverdomains",3]],[[["",0]],["lookupevals",3]],[[["",0]],["lookupshifts",3]],[[["",0]],["lookuppolys",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["e",6,[["fftfield",8]]]],[[],["e",6,[["fftfield",8]]]],[[],["e",6,[["fftfield",8]]]],[[],["e",6,[["fftfield",8]]]],null,[[],["vec",3,[["vec",3,[["field",8]]]]]],[[["vec",3,[["u32",0]]]],["vec",3,[["u32",0]]]],[[],["vec",3,[["gatetype",4]]]],[[["vec",3,[["u32",0]]]],["vec",3,[["vec",3,[["fftfield",8]]]]]],null,[[],["e",6,[["field",8]]]],null,[[],["e",6,[["field",8]]]],[[["",26,[["primefield",8],["display",8]]],["",26,[["primefield",8],["display",8]]],["usize",0]],["",26,[["primefield",8],["display",8]]]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["e",6,[["field",8]]]],[[],["vec",3,[["e",6,[["field",8]]]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[["usize",0],["",26,[["field",8],["display",8]]]],["endomulresult",3,[["",26,[["field",8],["display",8]]]]]],[[],["usize",0]],[[]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,[[["usize",0]],["vec",3,[["circuitgate",3,[["fftfield",8]]]]]],[[["usize",0]]],null,null,null,null,null,null,null,null,null,[[["fftfield",8],["iterator",8],["d",3,[["fftfield",8]]],["fftfield",8],["fftfield",8],["fftfield",8],["",0]],["result",6,[["evaluations",3,[["fftfield",8],["d",3,[["fftfield",8]]]]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["combinedentry",3]],[[["",0]],["uncombinedentry",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["combinedentry",3]],["ordering",4]],[[["",0],["uncombinedentry",3]],["ordering",4]],[[["d",3,[["fftfield",8]]]],["vec",3,[["e",6,[["fftfield",8]]]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["combinedentry",3]],["bool",0]],[[["",0],["uncombinedentry",3]],["bool",0]],[[["jointlookup",3],["usize",0]]],[[["",0],["jointlookup",3],["usize",0]],["combinedentry",3]],[[["jointlookup",3],["usize",0]],["uncombinedentry",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["",0],["combinedentry",3]],["bool",0]],[[["",0],["uncombinedentry",3]],["bool",0]],[[["",0],["combinedentry",3]],["option",4,[["ordering",4]]]],[[["",0],["uncombinedentry",3]],["option",4,[["ordering",4]]]],[[["",26,[["entry",8],["eq",8],["hash",8],["clone",8]]],["fn",8],["d",3,[["fftfield",8]]]],["result",6,[["vec",3,[["vec",3,[["",26,[["entry",8],["eq",8],["hash",8],["clone",8]]]]]]]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["fftfield",8],["fn",8],["usize",0],["d",3,[["fftfield",8]]],["fftfield",8]]],[[]],[[]],[[["vec",3,[["fftfield",8]]],["d",3,[["fftfield",8]]],["",0]],["evaluations",3,[["fftfield",8],["d",3,[["fftfield",8]]]]]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["e",6,[["",26,[["fftfield",8],["squarerootfield",8]]]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["e",6,[["fftfield",8]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[["usize",0]],["varbasemulresult",3,[["",26,[["fftfield",8],["display",8]]]]]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["lookupevaluations",3]],[[["",0]],["proofevaluations",3]],[[["",0]],["randomoracles",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["proofevaluations",3]],[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[],["proofevaluations",3]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],null,null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["wire",3]],[[["",0],["",0]]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["wire",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0],["wire",3]],["bool",0]],[[["usize",0]]],[[["read",8]],["ioresult",6]],null,[[["",0]],["result",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[["",0],["write",8]],["ioresult",6]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["prooferror",4]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,[[["d",3,[["",26,[["fftfield",8],["squarerootfield",8]]]]],["bool",0],["option",4]]],[[["constraintsystem",3],["arithmeticspongeparams",3],["arc",3,[["srs",3]]]]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],null,null,null,[[["d",3,[["",26,[["fftfield",8],["squarerootfield",8]]]]],["bool",0],["option",4]]],[[["",0],["formatter",3]],["result",6]],null,null,null,[[]],[[]],[[]],[[["arc",3,[["srs",3]]],["path",3],["option",4,[["u64",0]]],["arithmeticspongeparams",3],["arithmeticspongeparams",3]],["result",4,[["string",3]]]],null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],null,null,[[["option",4]],["hashset",3,[["column",4]]]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,null,null,null,[[["",0],["path",3],["option",4,[["bool",0]]]],["result",4,[["string",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["verifierindex",3]],[[]],[[]],[[]],null,null,null,[[["",0],["",0]]],[[["",0],["proofevaluations",3]]],[[["",0]],["scalarchallenge",3]],[[["arithmeticspongeparams",3]]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["lookupcommitments",3]],[[["",0]],["provercommitments",3]],[[["",0]],["proverproof",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["index",3],["vec",3]],["result",6]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],null,[[]],[[]],[[]],null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],null,[[["",0],["verifierindex",3],["polycomm",3]],["oraclesresult",3,[["",26,[["clone",8],["fqsponge",8]]]]]],[[["",0],["verifierindex",3]],["vec",3,[["vec",3,[["vec",3]]]]]],null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",6,[["bool",0]]]],[[]],[[]],[[]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,[[["usize",0]]],null,[[]],null,[[],["usize",0]],[[]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null],"p":[[4,"ConstraintType"],[3,"Alphas"],[3,"Builder"],[3,"MustConsumeIterator"],[3,"BenchmarkCtx"],[4,"GateError"],[3,"Shifts"],[3,"LookupConstraintSystem"],[3,"ConstraintSystem"],[13,"DisconnectedWires"],[13,"IncorrectPublic"],[13,"Custom"],[3,"EvaluationDomains"],[4,"ConstantExpr"],[4,"Op2"],[4,"PolishToken"],[4,"Expr"],[4,"Column"],[3,"LookupEnvironment"],[3,"Constants"],[3,"Environment"],[3,"Variable"],[3,"CacheId"],[3,"Cache"],[3,"Linearization"],[13,"Witness"],[13,"LookupSorted"],[13,"LookupKindIndex"],[13,"Index"],[13,"Coefficient"],[13,"Literal"],[13,"Pow"],[13,"Add"],[13,"Mul"],[13,"Sub"],[13,"Mds"],[13,"Constant"],[13,"Cell"],[13,"Double"],[13,"Square"],[13,"BinOp"],[13,"UnnormalizedLagrangeBasis"],[13,"Pow"],[13,"Cache"],[13,"Literal"],[13,"Cell"],[13,"Pow"],[13,"UnnormalizedLagrangeBasis"],[13,"Load"],[13,"Mds"],[4,"GateType"],[4,"CurrOrNext"],[4,"LookupsUsed"],[4,"GateLookupTable"],[3,"GatesLookupSpec"],[3,"GatesLookupMaps"],[3,"LocalPosition"],[3,"SingleLookup"],[3,"JointLookup"],[3,"LookupInfo"],[3,"CircuitGate"],[3,"WitnessEvals"],[3,"WitnessShifts"],[3,"WitnessOverDomains"],[3,"LookupEvals"],[3,"LookupShifts"],[3,"LookupPolys"],[3,"EndoMulResult"],[4,"GenericGateSpec"],[13,"Const"],[13,"Add"],[13,"Mul"],[3,"CombinedEntry"],[3,"UncombinedEntry"],[8,"Entry"],[3,"RoundEquation"],[3,"VarbaseMulResult"],[3,"LookupEvaluations"],[3,"RandomOracles"],[3,"ProofEvaluations"],[3,"Wire"],[4,"ProofError"],[13,"Prover"],[13,"Permutation"],[3,"Index"],[3,"LookupVerifierIndex"],[3,"VerifierIndex"],[8,"FrSponge"],[3,"LookupCommitments"],[3,"ProverCommitments"],[3,"ProverProof"],[3,"OraclesResult"]]},\
"mina_curves":{"doc":"","t":[0,6,3,6,3,0,0,0,0,6,3,11,11,11,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,6,17,17,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,17,17,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["pasta","Fp","FpParameters","Fq","FqParameters","fp","fq","pallas","vesta","Fp","FpParameters","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip","Fq","FqParameters","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip","Affine","G_GENERATOR_X","G_GENERATOR_Y","PallasParameters","Projective","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","from","init","into","mul_by_a","to_owned","try_from","try_into","type_id","vzip","Affine","G_GENERATOR_X","G_GENERATOR_Y","Projective","VestaParameters","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","from","init","into","mul_by_a","to_owned","try_from","try_into","type_id","vzip"],"q":["mina_curves","mina_curves::pasta","","","","","","","","mina_curves::pasta::fp","","","","","","","","","","","","","","mina_curves::pasta::fq","","","","","","","","","","","","","","mina_curves::pasta::pallas","","","","","","","","","","","","","","","","","","","","","","","mina_curves::pasta::vesta","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","G_GENERATOR_X = 1","G1_GENERATOR_Y = …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","G_GENERATOR_X = 1","G1_GENERATOR_Y = …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],"f":[null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["pallasparameters",3]],[[["",0],["",0]]],[[],["pallasparameters",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["pallasparameters",3]],["bool",0]],[[]],[[],["usize",0]],[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["vestaparameters",3]],[[["",0],["",0]]],[[],["vestaparameters",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["vestaparameters",3]],["bool",0]],[[]],[[],["usize",0]],[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]]],"p":[[3,"FpParameters"],[3,"FqParameters"],[3,"PallasParameters"],[3,"VestaParameters"]]},\
"mina_signer":{"doc":"Mina signer","t":[6,6,8,13,4,6,8,8,13,11,11,11,11,5,5,11,11,10,11,11,11,11,0,0,0,0,0,10,0,11,10,11,11,11,10,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,3,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11],"n":["BaseField","CurvePoint","Hashable","MAINNET","NetworkId","ScalarField","Signable","Signer","TESTNET","borrow","borrow_mut","clone","clone_into","create","custom","deref","deref_mut","domain_string","drop","from","init","into","keypair","pubkey","roinput","schnorr","seckey","sign","signature","to_owned","to_roinput","try_from","try_into","type_id","verify","vzip","Keypair","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","fmt","from","from_hex","from_parts_unsafe","get_address","init","into","ne","public","rand","to_owned","to_string","try_from","try_into","type_id","vzip","CompressedPubKey","MINA_ADDRESS_LEN","PubKey","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","fmt","fmt","from","from","from_address","from_point_unsafe","init","init","into","into","into_address","into_address","into_compressed","into_point","is_odd","ne","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","x","ROInput","append_bit","append_bytes","append_field","append_scalar","append_u32","append_u64","borrow","borrow_mut","default","deref","deref_mut","drop","from","init","into","new","to_bytes","to_fields","try_from","try_into","type_id","vzip","Schnorr","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","sign","try_from","try_into","type_id","verify","vzip","SecKey","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","from","init","into","into_scalar","ne","new","rand","to_owned","try_from","try_into","type_id","vzip","Signature","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","fmt","from","init","into","ne","new","rx","s","to_owned","to_string","try_from","try_into","type_id","vzip"],"q":["mina_signer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_signer::keypair","","","","","","","","","","","","","","","","","","","","","","","","","","mina_signer::pubkey","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_signer::roinput","","","","","","","","","","","","","","","","","","","","","","","mina_signer::schnorr","","","","","","","","","","","","","","","","mina_signer::seckey","","","","","","","","","","","","","","","","","","","","","mina_signer::signature","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Base field element type","Affine curve point type","Interface for hashable objects","Id for mainnet","Mina network (or blockchain) identifier","Scalar field element type","Interface for signed objects","Signer interface for signing Signable inputs and verifying …","Id for all testnets","","","","","Create a default signer context for network instance …","Create a custom signer context for network instance …","","","Returns the unique domain string for this input type on …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Keypair structures and algorithms","Public key structures and algorithms","Random oracle input structures and algorithms","Mina Schnorr signature scheme","Secret key structures and helpers","Sign <code>input</code> (see Signable) using keypair <code>kp</code> and return the …","Mina signature structure and associated helpers","","Serialization to random oracle input","","","","Verify that the signature <code>sig</code> on <code>input</code> (see Signable) is …","","Keypair structure","","","","","","","","","","","Returns the argument unchanged.","Deserialize a keypair from secret key hex","Create a keypair from scalar field <code>secret</code> element and …","Obtain the Mina address corresponding to the keypair’s …","","Calls <code>U::from(self)</code>.","","Public key","Generate a random keypair","","","","","","","Compressed public keys consist of x-coordinate and …","Length of Mina addresses","Public key","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize Mina address into public key","Create a public key from curve point Note: Does not check …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Serialize public key into corresponding Mina address","Serialize compressed public key into corresponding Mina …","Convert public key into compressed public key","Convert public key into curve point","Parity of y-coordinate","","","","","","","","","","","","","X-coordinate","Random oracle input structure","Append a single bit","Append bytes","Append a base field element","Append a scalar field element","Append a 32-bit unsigned integer","Append a 64-bit unsigned integer","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new empty random oracle input","Serialize random oracle input to bytes","Serialize random oracle input to vector of base field …","","","","","Schnorr signer context for the Mina signature algorithm","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new Schnorr signer context for network instance …","","","","","","","Secret key","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Convert secret key into scalar field element","","Create a secret key from scalar field element","Generate a random secret key","","","","","","Signature structure","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Create a new signature","Base field component","Scalar field component","","","","","",""],"i":[0,0,0,1,0,0,0,0,1,1,1,1,1,0,0,1,1,2,1,1,1,1,0,0,0,0,0,3,0,1,4,1,1,1,3,1,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,6,6,6,7,6,6,6,7,6,7,6,7,6,6,7,6,6,7,6,6,7,6,7,6,7,6,7,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"f":[null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["networkid",4]],[[["",0],["",0]]],[[["networkid",4]]],[[["arithmeticspongeparams",3,[["basefield",6]]],["networkid",4]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["networkid",4]],["str",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],null,null,null,null,null,[[["",0],["keypair",3],["signable",8]],["signature",3]],null,[[["",0]]],[[],["roinput",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["signature",3],["pubkey",3],["signable",8]],["bool",0]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["keypair",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["keypair",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["str",0]],["result",4,[["str",0]]]],[[["scalarfield",6],["curvepoint",6]]],[[],["string",3]],[[],["usize",0]],[[]],[[["",0],["keypair",3]],["bool",0]],null,[[]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["pubkey",3]],[[["",0]],["compressedpubkey",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["pubkey",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["str",0]],["result",4,[["str",0]]]],[[["curvepoint",6]]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["compressedpubkey",3]],[[],["curvepoint",6]],null,[[["",0],["pubkey",3]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,[[["",0],["bool",0]]],[[["",0]]],[[["",0],["basefield",6]]],[[["",0],["scalarfield",6]]],[[["",0],["u32",0]]],[[["",0],["u64",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["roinput",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0]],["vec",3,[["basefield",6]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[["arithmeticsponge",3,[["basefield",6]]],["networkid",4]],["schnorr",3]],[[["",0],["keypair",3]],["signature",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["signature",3],["pubkey",3]],["bool",0]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["seckey",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["seckey",3]],["bool",0]],[[]],[[],["usize",0]],[[]],[[],["scalarfield",6]],[[["",0],["seckey",3]],["bool",0]],[[["scalarfield",6]]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["signature",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["signature",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0],["signature",3]],["bool",0]],[[["basefield",6],["scalarfield",6]]],null,null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]]],"p":[[4,"NetworkId"],[8,"Signable"],[8,"Signer"],[8,"Hashable"],[3,"Keypair"],[3,"PubKey"],[3,"CompressedPubKey"],[3,"ROInput"],[3,"Schnorr"],[3,"SecKey"],[3,"Signature"]]},\
"o1_utils":{"doc":"","t":[0,0,0,0,8,10,10,10,10,10,8,10,10,10,10,8,10,10,10,10,10,10,3,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,5,5],"n":["dense_polynomial","evaluations","field_helpers","serialization","ExtendedDensePolynomial","chunk_polynomial","eval","eval_polynomial","scale","shiftr","ExtendedEvaluations","pow","scale","shift","square","FieldHelpers","from_bits","from_bytes","from_hex","to_bits","to_bytes","to_hex","SerdeAs","borrow","borrow_mut","deref","deref_mut","deserialize_as","drop","from","init","into","ser","serialize_as","try_from","try_into","type_id","vzip","deserialize","serialize"],"q":["o1_utils","","","","o1_utils::dense_polynomial","","","","","","o1_utils::evaluations","","","","","o1_utils::field_helpers","","","","","","","o1_utils::serialization","","","","","","","","","","","","","","","","o1_utils::serialization::ser",""],"d":["This adds a few utility functions for the DensePolynomial …","This adds a few utility functions for the Evaluations …","","This adds a few utility functions for serializing and …","An extension for the DensePolynomial type.","Multiplies the chunks of a polynomial with powers of zeta^n","This function evaluates polynomial in chunks.","<code>eval_polynomial(coeffs, x)</code> evaluates a polynomial given …","This function “scales” (multiplies all the …","Shifts all the coefficients to the right.","An extension for the Evaluations type.","Raise each evaluation to some power <code>pow</code>","This function “scales” (multiplies) a polynomial with …","Utility function for shifting poly along domain coordinate","Square each evaluation","Field element helpers","Deserialize from bits","Deserialize from bytes","Deserialize from hex","Serialize to bits","Serialize to bytes","Serialize to hex","You can use SerdeAs with serde_with in order to serialize …","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","You can use this module for serialization and …","","","","","","You can use this to deserialize an arkworks type with …","You can use this to serialize an arkworks type with serde …"],"i":[0,0,0,0,0,1,1,1,1,1,0,2,2,2,2,0,3,3,3,3,3,3,0,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,0,0],"f":[null,null,null,null,null,[[["",0],["usize",0]]],[[["",0],["usize",0]],["vec",3]],[[]],[[["",0]]],[[["",0],["usize",0]]],null,[[["",0],["usize",0]]],[[["",0]]],[[["",0],["usize",0]]],[[["",0]]],null,[[],["result",4,[["str",0]]]],[[],["result",4,[["str",0]]]],[[["str",0]],["result",4,[["str",0]]]],[[],["vec",3,[["bool",0]]]],[[],["vec",3,[["u8",0]]]],[[],["string",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],null,[[["",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[],["result",4]],[[],["result",4]]],"p":[[8,"ExtendedDensePolynomial"],[8,"ExtendedEvaluations"],[8,"FieldHelpers"],[3,"SerdeAs"]]},\
"ocaml_derive":{"doc":"ocaml-derive adds a number of derives to make ocaml-gen …","t":[24,24,24,23],"n":["CustomType","Enum","Struct","func"],"q":["ocaml_derive","","",""],"d":["Derives implementations for OCamlDesc and OCamlBinding on …","The Enum derive macro. It generates implementations of …","The Struct derive macro. It generates implementations of …","A macro to create OCaml bindings for a function that uses #…"],"i":[0,0,0,0],"f":[null,null,null,null],"p":[]},\
"ocaml_gen":{"doc":"Generating bindings","t":[24,24,3,8,8,24,11,11,14,0,14,14,14,14,14,11,11,11,11,23,11,11,11,11,11,10,10,11,14,11,11,11,11,10],"n":["CustomType","Enum","Env","OCamlBinding","OCamlDesc","Struct","borrow","borrow_mut","const_random","conv","decl_fake_generic","decl_func","decl_module","decl_type","decl_type_alias","default","drop","fmt","from","func","get_type","into","nested","new_module","new_type","ocaml_binding","ocaml_desc","parent","paste","root","try_from","try_into","type_id","unique_id"],"q":["ocaml_gen","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Derives implementations for OCamlDesc and OCamlBinding on …","The Enum derive macro. It generates implementations of …","The environment at some point in time during the …","OCamlBinding is the trait implemented by types to generate …","OCamlDesc is the trait implemented by types to facilitate …","The Struct derive macro. It generates implementations of …","","","Random constants","Implementations of crate::OCamlDesc for types that have …","Creates a fake generic. This is a necessary hack, at the …","Declares the binding for a given function","Creates a module","Declares the binding for a given type","Declares a new OCaml type that is made of other types","","This makes sure that we close our OCaml modules (with the …","","Returns the argument unchanged.","A macro to create OCaml bindings for a function that uses #…","retrieves a type that was declared previously","Calls <code>U::from(self)</code>.","how deeply nested are we currently? (default is 0)","create a module and enters it","Declares a new type. If the type was already declared, …","will generate the OCaml bindings for a type (called root …","describes the type in OCaml, given the current environment …","go back up one module","","you can call this to go back to the root and finalize the …","","","","Returns a unique ID for the type. This ID will not change …"],"i":[0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,2,3,1,0,1,1,1,1,3],"f":[null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,null,null,null,null,[[],["env",3]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[]],null,[[["",0],["u128",0],["str",0]],["string",3]],[[]],[[["",0]],["usize",0]],[[["",0],["str",0]],["string",3]],[[["",0],["u128",0],["str",0]]],[[["env",3],["option",4,[["str",0]]],["bool",0]],["string",3]],[[["env",3]],["string",3]],[[["",0]],["string",3]],null,[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["u128",0]]],"p":[[3,"Env"],[8,"OCamlBinding"],[8,"OCamlDesc"]]},\
"oracle":{"doc":"","t":[8,10,10,10,10,10,10,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,13,3,3,18,18,18,3,3,3,3,18,18,18,18,18,18,8,8,4,13,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,5,10,11,12,5,11,12,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,17,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FqSponge","absorb_fr","absorb_g","challenge","challenge_fq","digest","new","pasta","poseidon","sponge","fp","fp5","fp_3","fq","fq5","fq_3","params","params","params","params","params","params","Absorbed","ArithmeticSponge","ArithmeticSpongeParams","FULL_MDS","HALF_ROUNDS_FULL","INITIAL_ARK","PlonkSpongeConstants15W","PlonkSpongeConstants3W","PlonkSpongeConstants5W","PlonkSpongeConstantsBasic","ROUNDS_FULL","ROUNDS_PARTIAL","SPONGE_BOX","SPONGE_CAPACITY","SPONGE_RATE","SPONGE_WIDTH","Sponge","SpongeConstants","SpongeState","Squeezed","absorb","absorb","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","constants","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from","from","full_round","full_round","init","init","init","init","init","init","init","into","into","into","into","into","into","into","mds","new","new","poseidon_block_cipher","reset","reset","round_constants","sbox","serialize","sponge_state","squeeze","squeeze","state","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","CHALLENGE_LENGTH_IN_LIMBS","DefaultFqSponge","DefaultFrSponge","ScalarChallenge","absorb_fr","absorb_g","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","challenge","challenge_fq","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","digest","drop","drop","drop","endo_coefficient","fmt","from","from","from","init","init","init","into","into","into","last_squeezed","last_squeezed","new","sponge","sponge","squeeze","squeeze","squeeze_field","squeeze_limbs","to_field","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["oracle","","","","","","","","","","oracle::pasta","","","","","","oracle::pasta::fp","oracle::pasta::fp5","oracle::pasta::fp_3","oracle::pasta::fq","oracle::pasta::fq5","oracle::pasta::fq_3","oracle::poseidon","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oracle::poseidon::SpongeState","","oracle::sponge","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","This module implements Poseidon Hash Function primitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cryptographic sponge interface - for hashing an arbitrary …","","","","Absorb an array of field elements <code>x</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new cryptographic sponge using arithmetic sponge …","","","Reset the sponge back to its initial state (as if it were …","","","","","","Squeeze an output from the sponge","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A challenge which is used as a scalar on a group element …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,3,3,3,0,0,0,0,3,3,3,3,3,3,0,0,0,2,4,5,6,7,8,9,2,10,5,6,7,8,9,2,10,5,6,7,8,9,2,10,5,6,7,8,9,2,10,5,5,10,6,7,8,9,2,10,5,6,7,8,9,2,10,5,10,6,7,8,9,2,10,5,2,10,6,7,8,9,2,10,5,0,5,6,7,8,9,2,10,5,6,7,8,9,2,10,5,10,4,5,0,4,5,10,0,10,5,4,5,5,6,7,8,9,2,10,5,6,7,8,9,2,10,5,6,7,8,9,2,10,5,6,7,8,9,2,10,5,6,7,8,9,2,10,5,11,12,13,0,0,0,0,14,14,15,13,14,15,13,14,14,14,13,14,13,14,15,13,14,15,13,14,14,15,13,14,0,13,15,13,14,15,13,14,15,13,14,15,14,14,15,14,15,14,14,14,13,13,14,15,13,14,15,13,14,15,13,14,15,13,14],"f":[null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[]],[[["arithmeticspongeparams",3]]],null,null,null,null,null,null,null,null,null,[[],["arithmeticspongeparams",3,[["fp",6]]]],[[],["arithmeticspongeparams",3,[["fp",6]]]],[[],["arithmeticspongeparams",3,[["fp",6]]]],[[],["arithmeticspongeparams",3,[["fq",6]]]],[[],["arithmeticspongeparams",3,[["fq",6]]]],[[],["arithmeticspongeparams",3,[["fq",6]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["plonkspongeconstantsbasic",3]],[[["",0]],["plonkspongeconstants5w",3]],[[["",0]],["plonkspongeconstants3w",3]],[[["",0]],["plonkspongeconstants15w",3]],[[["",0]],["spongestate",4]],[[["",0]],["arithmeticspongeparams",3]],[[["",0]],["arithmeticsponge",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[],["arithmeticspongeparams",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["arithmeticspongeparams",3],["vec",3],["usize",0]]],[[["",0],["usize",0]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["arithmeticspongeparams",3]]],[[["arithmeticspongeparams",3]],["arithmeticsponge",3]],[[["arithmeticspongeparams",3],["vec",3]]],[[["",0]]],[[["",0]]],null,[[["field",8]],["field",8]],[[["",0]],["result",4]],null,[[["",0]]],[[["",0]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0]],["scalarchallenge",3]],[[["",0]],["defaultfqsponge",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[],["primefield",8]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],null,null,[[["arithmeticspongeparams",3]],["defaultfqsponge",3]],null,null,[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0]]],[[["",0],["usize",0]],["vec",3,[["u64",0]]]],[[["",0],["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]]],"p":[[8,"FqSponge"],[4,"SpongeState"],[8,"SpongeConstants"],[8,"Sponge"],[3,"ArithmeticSponge"],[3,"PlonkSpongeConstantsBasic"],[3,"PlonkSpongeConstants5W"],[3,"PlonkSpongeConstants3W"],[3,"PlonkSpongeConstants15W"],[3,"ArithmeticSpongeParams"],[13,"Absorbed"],[13,"Squeezed"],[3,"ScalarChallenge"],[3,"DefaultFqSponge"],[3,"DefaultFrSponge"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};