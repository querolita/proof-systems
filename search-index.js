var searchIndex = JSON.parse('{\
"commitment_dlog":{"doc":"","t":[8,8,0,0,0,3,8,16,3,16,3,5,5,11,11,11,11,11,11,5,12,12,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,10,11,5,11,11,12,5,12,10,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,18,18,18,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11],"n":["CommitmentField","QnrField","chunked","commitment","srs","Challenges","CommitmentCurve","Map","OpeningProof","Params","PolyComm","b_poly","b_poly_coefficients","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","ceil_log2","chal","chal_inv","challenges","chunk_blinding","chunk_commitment","clone","clone","clone_into","clone_into","combine","combine_one","combine_one_endo","combined_inner_product","delta","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","fmt","fmt","from","from","from","init","init","init","into","into","into","lr","map","multi_scalar_mul","of_coordinates","prechallenges","product","scale","serialize","sg","shift_scalar","shifted","to_coordinates","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unshifted","vzip","vzip","vzip","z1","z2","QNR","QNR","QNR","QnrField","SRS","add_lagrange_basis","borrow","borrow_mut","clone","clone_into","commit","commit_evaluations","commit_evaluations_non_hiding","commit_helper","commit_non_hiding","create","default","deref","deref_mut","deserialize","drop","endo_q","endo_r","endos","fmt","from","g","h","init","into","lagrange_bases","mask","max_degree","open","serialize","to_owned","try_from","try_into","type_id","verify","vzip"],"q":["commitment_dlog","","","","","commitment_dlog::commitment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","commitment_dlog::srs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","A polynomial commitment.","Returns (1 + chal[-1] x)(1 + chal[-2] x^2)(1 + chal[-3] …","","","","","","","","Returns ceil(log2(d)) but panics if d = 0.","","","","Multiplies each blinding chunk of f with powers of zeta^n …","Multiplies each commitment chunk of f with powers of zeta^n","","","","","","","","Computes the linearization of the evaluations of a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the product of all the field elements belonging to …","","","","Inside the circuit, we have a specialized scalar …","","","","","","","","","","","","","","","","","","","","","","","","","Compute commitments to the lagrange basis corresponding to …","","","","","Commits a polynomial, potentially splitting the result in …","","","","This function commits a polynomial using the SRS’ basis …","This function creates SRS instance for circuits with …","","","","","","Coefficient for the curve endomorphism","Coefficient for the curve endomorphism","","","","The vector of group elements for committing to polynomials …","A group element used for blinding commitments","","","Commitments to Lagrange bases, per domain size","Turns a non-hiding polynomial commitment into a hidding …","","This function opens polynomial commitments in batch plnms: …","","","","","","This function verifies batch of batched polynomial …",""],"i":[0,0,0,0,0,0,0,1,0,1,0,0,0,2,3,4,2,3,4,0,2,2,4,3,3,3,4,3,4,1,1,1,0,4,2,3,4,2,3,4,3,2,3,4,3,4,2,3,4,2,3,4,2,3,4,4,3,3,1,4,0,3,3,4,0,3,1,3,4,2,3,4,2,3,4,2,3,4,3,2,3,4,4,4,5,5,5,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],"f":[null,null,null,null,null,null,null,null,null,null,null,[[["field",8]],["field",8]],[[],["vec",3,[["field",8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["usize",15]],null,null,[[],["challenges",3]],[[]],[[]],[[],["polycomm",3]],[[],["openingproof",3]],[[]],[[]],[[],["vec",3]],[[],["vec",3]],[[["scalarchallenge",3]],["vec",3]],[[["usize",15]]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],null,[[],["polycomm",3]],[[]],[[]],[[],["vec",3,[["scalarchallenge",3]]]],[[],["field",8]],[[],["polycomm",3]],[[],["result",4]],null,[[]],null,[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],null,null,null,null,null,null,null,[[["d",3]]],[[]],[[]],[[],["srs",3]],[[]],[[["densepolynomial",3],["option",4,[["usize",15]]]]],[[["d",3],["evaluations",3],["option",4,[["usize",15]]]]],[[["d",3],["evaluations",3],["option",4,[["usize",15]]]],["polycomm",3]],[[["option",4,[["usize",15]]],["bool",15],["option",4,[["usize",15]]]],["polycomm",3]],[[["densepolynomial",3],["option",4,[["usize",15]]]],["polycomm",3]],[[["usize",15]]],[[],["srs",3]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],null,null,[[]],[[["formatter",3]],["result",6]],[[]],null,null,[[],["usize",15]],[[]],null,[[["polycomm",3]]],[[],["usize",15]],[[],["openingproof",3]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["vec",3]],["bool",15]],[[]]],"p":[[8,"CommitmentCurve"],[3,"Challenges"],[3,"PolyComm"],[3,"OpeningProof"],[8,"QnrField"],[3,"SRS"]]},\
"export_test_vectors":{"doc":"","t":[13,13,4,11,11,11,11,11,11,11,11,11,11,5,11,11,11,0,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,12,11,11,12,12,5,5,11,11,12,11,11,11,11,11,11,11,11],"n":["B10","Hex","Mode","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","from_str","init","into","main","try_from","try_into","type_id","vectors","vzip","TestVector","TestVectors","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","generate","init","init","input","into","into","name","output","poseidon","rand_fields","serialize","serialize","test_vectors","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["export_test_vectors","","","","","","","","","","","","","","","","","","","export_test_vectors::vectors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,2,3,2,3,2,3,2,3,2,3,2,3,2,3,0,2,3,3,2,3,2,3,0,0,2,3,2,2,3,2,3,2,3,2,3],"f":[null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["str",15]],["result",4]],[[],["usize",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],null,null,[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["mode",4]],["testvectors",3]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],null,null,[[],["fp",6]],[[["u8",15]],["vec",3,[["fp",6]]]],[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]]],"p":[[4,"Mode"],[3,"TestVectors"],[3,"TestVector"]]},\
"groupmap":{"doc":"","t":[3,8,10,11,11,11,11,11,11,11,5,11,11,10,11,10,11,11,11,11,11],"n":["BWParameters","GroupMap","batch_to_group_x","batch_to_group_x","borrow","borrow_mut","deref","deref_mut","drop","from","get_y","init","into","setup","setup","to_group","to_group","try_from","try_into","type_id","vzip"],"q":["groupmap","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","returns the y-coordinate if x is a valid point on the …","","","","","","","","","",""],"i":[0,0,1,2,2,2,2,2,2,2,0,2,2,1,2,1,2,2,2,2,2],"f":[null,null,[[["vec",3]],["vec",3]],[[["vec",3]],["vec",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["option",4]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[8,"GroupMap"],[3,"BWParameters"]]},\
"kimchi":{"doc":"","t":[0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,3,13,13,4,13,3,17,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,12,5,5,11,11,11,12,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,12,12,12,11,12,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,12,12,5,5,12,12,12,12,12,12,12,3,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,3,13,3,13,13,13,4,13,4,3,13,13,6,13,13,3,4,13,13,13,13,13,3,13,13,13,13,3,13,13,13,13,13,13,13,13,4,4,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,12,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,3,13,13,4,13,13,4,13,13,3,3,3,4,13,13,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,0,0,0,0,17,17,17,17,17,17,17,5,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,3,12,11,11,5,5,11,11,11,11,11,11,12,11,11,11,11,5,12,12,3,8,16,16,3,17,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,5,11,11,5,17,3,11,11,5,11,11,11,11,11,11,12,12,11,11,11,11,3,12,11,11,5,11,11,11,11,11,11,12,11,11,11,11,5,3,3,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,12,12,12,12,17,17,6,17,17,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,3,3,11,11,11,11,12,12,12,5,11,12,11,11,11,11,11,11,12,11,11,12,12,12,5,11,12,12,12,11,11,11,12,11,11,11,11,12,12,5,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,8,10,10,10,10,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,12,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,17,17,17,17,17,17,17,5,3,12,11,11,12,11,11,12,11,12,11,12,11,11,12,12,12,12,11,11,11,11,12],"n":["bench","circuits","index","plonk_sponge","prover","range","verifier","BenchmarkCtx","batch_verification","borrow","borrow_mut","create_proof","default","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip","constraints","domains","expr","gate","gates","macros","polynomial","polynomials","scalars","wires","ConstraintSystem","Custom","DisconnectedWires","GateError","IncorrectPublic","Shifts","ZK_ROWS","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chacha8","clone","clone_into","coefficients8","complete_addl4","create","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","domain","drop","drop","drop","dummy_lookup_values","emull","endo","endomul_scalar8","eval_vanishes_on_last_4_rows","eval_zk_polynomial","evaluate","fmt","fmt","fr_sponge_params","from","from","from","gates","generic4","genericm","gnrc_lnrz","gnrc_quot","gnrc_scalars","init","init","init","into","into","into","l04","l08","l1","lookup_selectors","lookup_tables","lookup_tables8","mull8","new","perm_aggreg","perm_lnrz","perm_quot","perm_scalars","ps8","psm","public","serialize","shift","shifts","sid","sigmal1","sigmal8","sigmam","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vanishes_on_last_4_rows","vanishes_on_last_4_rows","verify","verify_generic","vzip","vzip","vzip","zero4","zero8","zk_polynomial","zk_w3","zkpl","zkpm","0","0","1","err","row","EvaluationDomains","borrow","borrow_mut","clone","clone_into","create","d1","d2","d4","d8","deref","deref_mut","deserialize","drop","fmt","from","init","into","serialize","to_owned","try_from","try_into","type_id","vzip","Add","Add","Add","Alpha","Alpha","Beta","Beta","BinOp","Cache","Cache","CacheId","Cell","Cell","Coefficient","Column","Constant","ConstantExpr","Constants","Double","Dup","E","EndoCoefficient","EndoCoefficient","Environment","Expr","Gamma","Gamma","Index","JointCombiner","JointCombiner","Linearization","Literal","Literal","Load","LookupAggreg","LookupEnvironment","LookupKindIndex","LookupSorted","LookupTable","Mds","Mds","Mul","Mul","Mul","Op2","PolishToken","Pow","Pow","Pow","Square","Store","Sub","Sub","Sub","UnnormalizedLagrangeBasis","UnnormalizedLagrangeBasis","VanishesOnLast4Rows","VanishesOnLast4Rows","Variable","Witness","Z","add","add","aggreg","alpha","beta","beta","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache","cell","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","coefficient","col","combine_constraints","constant","constant_term","constants","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","domain","double","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","endo_coefficient","eq","eq","eq","eq","eq","eq","eq","evaluate","evaluate","evaluate","evaluate_","evaluate_constants","evaluate_constants","evaluations","evaluations","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gamma","get_hash","get_hash","get_hash","hash","hash","hash","index","index_terms","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","is_one","is_one","is_zero","is_zero","joint_combiner","l0_1","l0_1","linearize","literal","lookup","map","mds","mul","mul","ne","ne","ne","ne","ne","ne","neg","neg","one","one","partial_cmp","partial_cmp","partial_cmp","pow","pow","pows","row","selectors","serialize","serialize","serialize","serialize","sorted","square","sub","sub","table","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_polish","to_polynomial","to_polynomial","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vanishes_on_last_4_rows","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","witness","z","zero","zero","0","0","0","0","0","0","0","0","0","0","1","1","1","1","col","row","0","0","0","0","0","0","0","0","1","1","1","2","0","0","0","0","0","col","row","ChaCha0","ChaCha1","ChaCha2","ChaChaFinal","CircuitGate","CompleteAdd","Curr","CurrOrNext","EndoMul","EndoMulScalar","GateType","Generic","Joint","JointLookup","LocalPosition","LookupInfo","LookupsUsed","Next","Poseidon","Single","SingleLookup","VarBaseMul","Zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_row","c","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","column","combine_table_entry","create","create_endomul","create_generic","create_generic_add","create_generic_const","create_generic_mul","create_generic_public","create_poseidon","create_poseidon_gadget","create_vbmul","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","endomul","entry","eq","eq","evaluate","evaluate","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_i64","from_u64","generic","get_hash","get_hash","hash","hash","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","kinds","kinds_map","lookup_kinds","lookup_kinds_map","lookup_used","max_joint_size","max_per_row","partial_cmp","partial_cmp","ps","rc","row","selector_polynomials","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shift","to_i64","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_u64","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vbmul","verify","verify_complete_add","verify_endomul","verify_endomul_scalar","verify_generic","verify_poseidon","verify_vbmul","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wires","write","zero","endosclmul","generic","poseidon","varbasemul","CONSTANT_COEFF","MUL_COEFF","POS_ROWS_PER_HASH","ROUNDS_PER_HASH","ROUNDS_PER_ROW","SPONGE_WIDTH","STATE_ORDER","round_to_cols","LookupEvals","LookupPolys","LookupShifts","WitnessEvals","WitnessOverDomains","WitnessShifts","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","d4","d8","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","h1","h1","h2","h2","init","init","init","init","init","init","into","into","into","into","into","into","l","l","lw","lw","next","next","this","this","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","w","z","chacha","complete_add","endomul_scalar","endosclmul","generic","lookup","permutation","poseidon","varbasemul","chacha20","chacha20_gates","chacha20_rows","constraint","xor_table","constraint","constraint","witness","EndoMulResult","acc","borrow","borrow_mut","constraint","constraints","deref","deref_mut","drop","from","init","into","n","try_from","try_into","type_id","vzip","witness","0","0","CombinedEntry","Entry","Field","Params","UncombinedEntry","ZK_ROWS","aggregation","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","constraints","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","evaluate","evaluate","evaluate","fmt","fmt","from","from","get_hash","get_hash","hash","hash","init","init","into","into","ne","ne","partial_cmp","partial_cmp","sorted","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify","vzip","vzip","zk_patch","ROUND_EQUATIONS","RoundEquation","borrow","borrow_mut","constraint","deref","deref_mut","drop","from","init","into","source","target","try_from","try_into","type_id","vzip","VarbaseMulResult","acc","borrow","borrow_mut","constraint","deref","deref_mut","drop","from","init","into","n","try_from","try_into","type_id","vzip","witness","LookupEvaluations","ProofEvaluations","RandomOracles","aggreg","alpha","alpha_chal","beta","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","combine","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","dummy_with_witness_evaluations","fmt","from","from","from","gamma","generic_selector","init","init","init","into","into","into","joint_combiner","lookup","poseidon_selector","s","sorted","table","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","u","u_chal","v","v_chal","vzip","vzip","vzip","w","z","zeta","zeta_chal","COLUMNS","GENERICS","GateWires","PERMUTS","WIRES","Wire","borrow","borrow_mut","clone","clone_into","col","deref","deref_mut","deserialize","drop","eq","fmt","from","init","into","ne","new","read","row","serialize","to_owned","try_from","try_into","type_id","vzip","write","Index","VerifierIndex","borrow","borrow","borrow_mut","borrow_mut","chacha_comm","coefficients_comm","complete_add_comm","constraints_expr","create","cs","deref","deref","deref_mut","deref_mut","deserialize","deserialize","domain","drop","drop","emul_comm","endo","endomul_scalar_comm","expr_linearization","fmt","fq_sponge_params","fq_sponge_params","fr_sponge_params","from","from","from_file","generic_comm","init","init","into","into","linearization","linearization","linearization_columns","lookup_selectors","lookup_tables","lookup_used","lookup_used","max_poly_size","max_poly_size","max_quot_size","max_quot_size","mul_comm","psm_comm","serialize","serialize","shift","sigma_comm","srs","srs","to_file","try_from","try_from","try_into","try_into","type_id","type_id","verifier_index","vzip","vzip","w","zkpm","FrSponge","absorb","absorb_evaluations","challenge","new","LookupCommitments","ProverCommitments","ProverProof","aggreg","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","commitments","create","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","evals","from","from","from","ft_eval1","init","init","init","into","into","into","lookup","oracles","prev_chal_evals","prev_challenges","proof","public","sorted","t_comm","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","w_comm","z_comm","CHACHA","COMPLETE_ADD","ENDML","ENDOMUL_SCALAR","MUL","PERM","PSDN","alpha_powers","OraclesResult","alphas","borrow","borrow_mut","combined_inner_product","deref","deref_mut","digest","drop","fq_sponge","from","ft_eval0","init","into","oracles","p_eval","polys","powers_of_eval_points_for_chunks","try_from","try_into","type_id","vzip","zeta1"],"q":["kimchi","","","","","","","kimchi::bench","","","","","","","","","","","","","","","","kimchi::circuits","","","","","","","","","","kimchi::circuits::constraints","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::constraints::GateError","","","","","kimchi::circuits::domains","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::exprkimchi::circuits::expr::Column","","","","","kimchi::circuits::expr::ConstantExpr","","","","","","","","","","","kimchi::circuits::expr::Expr","","","","","","","","","","","","kimchi::circuits::expr::PolishToken","","","","","","","kimchi::circuits::gate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::gates","","","","kimchi::circuits::gates::generic","","kimchi::circuits::gates::poseidon","","","","","","kimchi::circuits::polynomial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::polynomials","","","","","","","","","kimchi::circuits::polynomials::chacha","","","","","kimchi::circuits::polynomials::complete_add","kimchi::circuits::polynomials::endomul_scalar","","kimchi::circuits::polynomials::endosclmul","","","","","","","","","","","","","","","","","","kimchi::circuits::polynomials::lookup","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::polynomials::poseidon","","","","","","","","","","","","","","","","","kimchi::circuits::polynomials::varbasemul","","","","","","","","","","","","","","","","","kimchi::circuits::scalars","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::wires","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::plonk_sponge","","","","","kimchi::prover","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::range","","","","","","","","kimchi::verifier","","","","","","","","","","","","","","","","","","","","","",""],"d":["Hosts the benchmarking logic","","","","","","","","","","","Produces a proof","","","","","","","","","","","","","","","","","","","","","","","A specific gate did not verify correctly","Some connected wires have different values","Represents an error found when verifying a witness with a …","A public gate was incorrectly connected","Shifts represent the shifts required in the permutation …","","","","","","","","ChaCha indexes","","","coefficients polynomials in evaluation form","EC point addition selector evaluations w over domain.d4","creates a constraint system from a vector of gates (…","","","","","","","","evaluation domains","","","","Lookup tables","endoscalar multiplication selector evaluations over …","coefficient for the group endomorphism","EC point addition selector evaluations w over domain.d8","Evaluates the polynomial (x - w^{n - 4}) (x - w^{n - 3}) * …","Evaluates the polynomial (x - w^{n - 3}) * (x - w^{n - 2}) …","evaluate witness polynomials over domains","","","random oracle argument parameters","","","","circuit gates","multiplication evaluations over domain.d4","","generic constraint linearization poly contribution …","generic constraint quotient poly contribution computation","produces generic(zeta) * w0 * w1, generic(zeta) * w0, …","","","","","","","0-th Lagrange evaluated over domain.d4","0-th Lagrange evaluated over domain.d8","1-st Lagrange evaluated over domain.d8","Lookup selectors: For each kind of lookup-pattern, we have …","","","scalar multiplication selector evaluations over domain.d8","Generates the shifts for a given domain","permutation aggregation polynomial computation","permutation linearization poly contribution computation","permutation quotient poly contribution computation","","poseidon selector over domain.d8","poseidon constraint selector polynomial","number of public inputs","","wire coordinate shifts","retrieve the shifts","SID polynomial","permutation polynomial array evaluations over domain d1","permutation polynomial array evaluations over domain d8","permutation polynomial array","","","","","","","","","","","The polynomial (x - w^{n - 4}) (x - w^{n - 3}) * (x - w^{n …","the polynomial that vanishes on the last four rows","This function verifies the consistency of the wire …","function to verify the generic polynomials with a witness","","","","zero evaluated over domain.d8","zero evaluated over domain.d8","Computes the zero-knowledge polynomial for blinding the …","Returns the end of the circuit, which is used for …","zero-knowledge polynomial over domain.d8","zero-knowledge polynomial","","","","","","","","","","","Creates 4 evaluation domains <code>d1</code> (of size <code>n</code>), <code>d2</code> (of size <code>2n</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","A cache","","A key for a cached value","","","","A type representing one of the polynomials involved in the …","","An arithmetic expression over","The collection of constants required to evaluate an <code>Expr</code>.","","","An alias for the intended usage of the expression type in …","","","The collection of polynomials (all in evaluation form) and …","An multi-variate polynomial over the base ring <code>C</code> with …","","","","","","A “linearization”, which is linear combination with <code>E</code> …","","","","","The polynomials specific to the lookup argument.","","","","","","","","","A binary operation","For efficiency of evaluation, we compile expressions to …","","","","","","","","","UnnormalizedLagrangeBasis(i) is (x^n - 1) / (x - omega^i)","","","","A type representing a variable which can appear in a …","","","","","The lookup aggregation polynomials.","The challenge alpha from the PLONK IOP.","The expression <code>beta</code>.","The challenge beta from the PLONK IOP.","","","","","","","","","","","","","","","","","","","","","","","","","Cache the value of the given expression","Convenience function for constructing cell variables.","","","","","","","","","","","","","","","","","","","","The coefficient column polynomials","The column of this variable","Combines multiple constraints <code>[c0, ..., cn]</code> into a single …","Convenience function for constructing constant expressions.","","Constant values required","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The domains used in the PLONK argument.","","","","","","","","","","","","","","The endomorphism coefficient","","","","","","","","Evaluate an expression as a field element against an …","Evaluate an expression into a field element.","Evaluate an RPN expression to a field element.","Evaluate an expression as a field element against the …","Evaluate the constant expressions in this expression down …","Evaluate the constants in a linearization with …","Compute the polynomial corresponding to this expression, …","Compute the polynomial corresponding to this expression, …","","","","","","","","","","","","","","","","","","","","","","","","","","The challenge gamma from the PLONK IOP.","","","","","","","The index selector polynomials.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The challenge joint_combiner which is used to combine …","Computes <code>prod_{j != 1} (1 - omega^j)</code>","The value <code>prod_{j != 1} (1 - omega^j)</code>, used for efficiently","There is an optimization in PLONK called “linearization…","Convenience function for constructing expressions from …","Lookup specific polynomials","Apply a function to all the coefficients in the …","The MDS matrix","","","","","","","","","","","","","","","","Exponentiate a constant expression.","Exponentiate an expression","Compute the powers of <code>x</code>, <code>x^0, ..., x^{n - 1}</code>","The row (Curr of Next) of this variable","The lookup-type selector polynomials.","","","","","The sorted lookup table polynomials.","","","","The evaluations of the combined lookup table polynomial.","","","","","","","","","Compile an expression to an RPN expression.","Given a linearization and an environment, compute the …","Given a linearization and an environment, compute the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Evaluate the given constant expression to a field element.","The polynomial which vanishes on the last 4 elements of …","","","","","","","","","","","","","The witness column polynomials","The permutation aggregation polynomial.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ChaCha","","","","","Complete EC addition in Affine form","","A row accessible from a given row, corresponds to the fact …","EC variable base scalar multiplication with group …","Gate for computing the scalar corresponding to an …","","Generic arithmetic gate","","A spec for checking that the given vector belongs to a …","A position in the circuit relative to a given row.","Describes the desired lookup configuration.","Specifies whether a constraint system uses joint lookups. …","","Poseidon permutation gate","","Look up a single value in a lookup table. The value may be …","EC variable base scalar multiplication","Zero gate","","","","","","","","","","","","","","","","","For each row in the circuit, which lookup-constraints …","constraints vector","","","","","","","","","","","","","","","","","","","","Let’s say we want to do a lookup in a “vector-valued”…","Create the default lookup configuration.","","","creates an addition gate","creates a constant gate","creates a multiplication gate","creates a public input gate","","…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Evaluate the linear combination specifying the lookup …","Evaluate the combined value of a joint-lookup.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A single lookup constraint is a vector of lookup …","A map from the kind of gate (and whether it is the current …","Which lookup-patterns should be applied on which rows. …","","Check what kind of lookups, if any, are used by this …","The maximum joint size of any joint lookup in a constraint …","The maximum length of an element of <code>kinds</code>. This can be …","","","","round constant that are relevant for this specific gate","","Each entry in <code>kinds</code> has a corresponding selector …","","","","","","","","","Compute the offset corresponding to the <code>CurrOrNext</code> value.","","","","","","","","","","","","","","","","","","","","","","","","","","","type of the gate","","","","","","","","","","","This function verifies the consistency of the wire …","Check the correctness of witness values for a complete-add …","","","verifies that the generic gate constraints are solved by …","Checks if a witness verifies a poseidon gate","","","","","","","","","","gate wires","","this function creates “empty” circuit gate","","","","","","","Number of PLONK rows required to implement Poseidon","Number of rounds","Number of rows","Width of the sponge","The order in a row in which we store states before and …","Given a Poseidon round from 0 to 4 (inclusive), returns …","","","","Evaluations of the wires and permutation","","","","","","","","","","","","","","","","","","","","","","","","","","","evaluations over domain d4","evaluations over domain d8","","","","","","","","","","","","","","","","","","","","","","","","","lookup multiset","lookup multiset","lookup multiset","lookup multiset","","","","","","","","","","","","","aggregation","aggregation","lookup witness","lookup witness","next wire evaluations","next wire evaluations","this wire evaluations","this wire evaluations","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","wire evaluations","permutation evaluations","","This implements a complete EC addition gate. The layout is","","This source file implements short Weierstrass curve …","","This source file implements the arithmetization of plookup …","","","","","","","","","This function uses the constraints","The constraint for the endomul scalar computation","","The result of performing an endoscaling: the accumulated …","","","","The combined constraint for endoscaling.","The constraints for endoscaling.","","","","","","","","","","","","Generates the witness values for a series of endoscaling …","","","","","","","","The number of random values to append to columns for …","Computes the aggregation polynomial for maximum n lookups …","","","","","","","","","","","Specifies the lookup constraints as expressions.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the sorted lookup tables required by the lookup …","","","","","","","","","Checks that all the lookup constraints are satisfied.","","","Pad with zeroes and then add 3 random elements in the last …","","An equation of the form <code>(curr | next)[i] = round(curr[j])</code>","","","poseidon quotient poly contribution computation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lookup aggregation polynomial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","evaluation of the generic selector polynomial","","","","","","","","lookup-related evaluations","evaluation of the poseidon selector polynomial","permutation polynomials (PERMUTS-1 evaluations because the …","sorted lookup table polynomial","lookup table polynomial","","","","","","","","","","","","","","","","","","","","witness polynomials","permutation polynomial","","","","","GateWires document the wiring of a gate. More …","","","Wire documents the other cell that is wired to this one. …","","","","","","","","","","","","","","","","Creates a new set of wires for a given row.","","","","","","","","","","The index common to both the prover and verifier","The verifier index","","","","","Chacha polynomial commitments","coefficient commitment array","EC addition selector polynomial commitment","","","constraints system polynomials","","","","","","","evaluation domain","","","endoscalar multiplication selector polynomial commitment","endoscalar coefficient","endoscalar multiplication scalar computation selector …","","","random oracle argument parameters","","","","","Deserializes a VerifierIndex from a file, given a pointer …","coefficient commitment array","","","","","","","","","","","","maximal size of polynomial section","maximal size of polynomial section","maximal size of the quotient polynomial according to the …","maximal size of the quotient polynomial according to the …","EC variable base scalar multiplication selector polynomial …","poseidon constraint selector polynomial commitment","","","wire coordinate shifts","permutation commitment array","polynomial commitment keys","polynomial commitment keys","Writes a VerifierIndex to a file, potentially appending it …","","","","","","","","","","domain offset for zero-knowledge","zero-knowledge polynomial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This function runs random oracle argument","","","","","","","","","","","","","","","","","","","This function verifies the batch of zk-proofs proofs: …","","","","","","","","","","","","","Computes the powers of alpha, starting with alpha^2","The result of running the oracle protocol","pre-computed powers of the alpha challenge","","","?","","","the last evaluation of the Fq-Sponge in this protocol","","A sponge that acts on the base field of a curve","","The evaluation f(zeta) - t(zeta) * Z_H(zeta)","","","the challenges produced in the protocol","public polynomial evaluations","?","zeta^n and (zeta * omega)^n","","","","","pre-computed zeta^n"],"i":[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,2,2,0,2,0,0,3,4,2,3,4,2,4,4,4,4,4,4,3,4,2,3,4,2,4,4,3,4,2,4,4,4,4,0,0,4,4,2,4,3,4,2,4,4,4,4,4,4,3,4,2,3,4,2,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,3,4,2,3,4,2,3,4,2,0,4,4,4,3,4,2,4,4,0,0,4,4,5,6,5,7,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,10,11,9,11,9,11,12,0,12,0,12,11,13,0,12,0,0,12,11,0,9,11,0,0,9,11,13,9,11,0,9,11,11,13,0,13,13,13,9,11,9,10,11,0,0,9,12,11,12,11,9,10,11,12,11,12,11,0,13,13,9,12,14,15,12,15,15,14,16,13,17,9,18,19,10,12,11,20,15,14,16,13,17,9,18,19,10,12,11,20,19,12,13,17,9,18,10,12,11,20,13,17,9,18,10,12,11,20,13,17,18,16,17,12,12,20,16,19,20,15,14,16,13,17,9,18,19,10,12,11,20,15,14,16,13,17,9,18,19,10,12,11,20,13,17,11,20,16,12,15,14,16,13,17,9,18,19,10,12,11,20,15,13,17,9,18,10,12,11,12,12,11,12,12,20,12,12,13,17,17,9,9,18,10,12,12,11,20,15,14,16,13,17,9,18,19,10,12,12,12,11,20,15,13,17,18,13,17,18,16,20,15,14,16,13,17,9,18,19,10,12,11,20,15,14,16,13,17,9,18,19,10,12,11,20,9,12,9,12,15,0,16,12,12,16,20,15,9,12,13,17,9,18,12,11,9,12,9,12,13,17,18,9,12,0,17,14,13,17,11,20,14,12,9,12,14,13,17,9,18,10,12,11,20,12,20,20,17,9,12,15,14,16,13,17,9,18,19,10,12,11,20,15,14,16,13,17,9,18,19,10,12,11,20,15,14,16,13,17,9,18,19,10,12,11,20,9,16,15,14,16,13,17,9,18,19,10,12,11,20,16,16,9,12,21,22,23,24,25,26,27,28,29,30,27,28,29,30,31,31,32,33,34,35,36,37,38,39,36,38,39,36,40,41,42,43,44,45,45,46,46,46,46,0,46,47,0,46,46,0,46,48,0,0,0,0,47,46,48,0,46,46,47,49,50,51,46,52,48,53,47,49,50,51,46,52,48,53,52,53,47,49,50,51,46,52,48,53,47,49,50,51,46,52,48,53,47,46,49,0,52,53,53,53,53,53,53,53,53,53,47,49,50,51,46,52,48,53,47,49,50,51,46,52,48,53,47,49,50,51,46,52,48,53,47,49,50,51,46,52,48,53,53,51,47,46,50,51,47,49,46,48,53,47,49,50,51,46,52,48,53,46,46,53,47,46,47,46,47,49,50,51,46,52,48,53,47,49,50,51,46,52,48,53,52,52,46,46,52,52,52,47,46,53,53,49,52,47,49,50,51,46,52,48,53,47,46,47,49,50,51,46,52,48,53,46,47,49,50,51,46,52,48,53,47,49,50,51,46,52,48,53,53,47,49,50,51,46,52,48,53,50,53,53,53,53,53,53,53,53,47,49,50,51,46,52,48,53,53,53,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,55,56,57,58,59,54,55,56,57,58,59,54,55,56,57,58,59,54,55,56,57,58,59,56,56,54,55,56,57,58,59,54,55,56,57,58,59,54,55,56,57,58,59,54,55,56,57,58,59,57,59,57,59,54,55,56,57,58,59,54,55,56,57,58,59,57,59,57,59,55,58,55,58,54,55,56,57,58,59,54,55,56,57,58,59,54,55,56,57,58,59,54,55,56,57,58,59,54,55,56,57,58,59,54,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,60,60,0,0,60,60,60,60,60,60,60,60,60,60,60,0,61,62,0,0,63,63,0,0,0,61,62,61,62,61,62,61,62,61,62,0,61,62,61,62,61,62,61,62,63,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,0,61,62,61,62,61,62,61,62,0,61,62,0,0,0,64,64,0,64,64,64,64,64,64,64,64,64,64,64,64,0,65,65,65,0,65,65,65,65,65,65,65,65,65,65,65,0,0,0,0,66,67,67,67,66,68,67,66,68,67,66,68,67,66,68,67,68,67,66,68,67,66,68,67,66,68,67,68,67,66,68,67,67,68,66,68,67,66,68,67,67,68,68,68,66,66,66,68,67,66,68,67,66,68,67,66,68,67,67,67,67,67,66,68,67,68,68,67,67,0,0,0,0,0,0,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,0,0,70,71,70,71,71,71,71,0,70,70,70,71,70,71,70,71,71,70,71,71,71,71,0,70,70,71,71,70,71,71,71,70,71,70,71,70,71,0,71,71,70,71,70,71,70,71,71,71,70,71,71,71,70,71,71,70,71,70,71,70,71,70,70,71,71,71,0,72,72,72,72,0,0,0,73,73,74,75,73,74,75,73,74,75,73,74,75,75,75,73,74,75,73,74,75,73,74,75,75,73,74,75,75,73,74,75,73,74,75,74,75,75,75,75,75,73,74,73,74,75,73,74,75,73,74,75,73,74,75,75,73,74,75,74,74,0,0,0,0,0,0,0,0,0,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76],"f":[null,null,null,null,null,null,null,null,[[["vec",3,[["proverproof",3,[["affine",6]]]]]]],[[]],[[]],[[],["proverproof",3,[["affine",6]]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["constraintsystem",3]],[[]],null,null,[[["vec",3,[["circuitgate",3]]],["vec",3,[["vec",3,[["vec",3]]]]],["arithmeticspongeparams",3],["usize",15]],["option",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,null,null,[[["d",3,[["fftfield",8]]],["fftfield",8]],["fftfield",8]],[[["d",3,[["fftfield",8]]],["fftfield",8]],["fftfield",8]],[[["dp",3]],["witnessoverdomains",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],[[]],null,null,null,[[],["evaluations",3,[["d",3]]]],[[],["evaluations",3,[["d",3]]]],[[],["vec",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[["d",3]]],[[],["result",4,[["densepolynomial",3],["prooferror",4]]]],[[],["densepolynomial",3]],[[["witnessoverdomains",3],["densepolynomial",3]],["result",4,[["prooferror",4]]]],[[]],null,null,null,[[],["result",4]],null,[[]],null,null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["d",3,[["fftfield",8]]]],["dp",3,[["fftfield",8]]]],null,[[],["result",4,[["gateerror",4]]]],[[["densepolynomial",3]],["bool",15]],[[]],[[]],[[]],null,null,[[["d",3,[["fftfield",8]]]],["dp",3,[["fftfield",8]]]],[[["d",3,[["fftfield",8]]]],["fftfield",8]],null,null,null,null,null,null,null,null,[[]],[[]],[[],["evaluationdomains",3]],[[]],[[["usize",15]],["option",4]],null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,null,[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["expr",4]],["expr",4]],[[["column",4],["currornext",4]],["expr",4]],[[],["column",4]],[[],["variable",3]],[[],["constantexpr",4]],[[],["cacheid",3]],[[],["op2",4]],[[],["expr",4]],[[],["polishtoken",4]],[[],["linearization",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["column",4]],["ordering",4]],[[["variable",3]],["ordering",4]],[[["cacheid",3]],["ordering",4]],null,null,[[["usize",15],["vec",3]]],[[],["expr",4]],null,null,[[],["cache",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[["column",4]],["bool",15]],[[["variable",3]],["bool",15]],[[["constantexpr",4]],["bool",15]],[[["cacheid",3]],["bool",15]],[[["op2",4]],["bool",15]],[[["expr",4]],["bool",15]],[[["polishtoken",4]],["bool",15]],[[["d",3],["environment",3]],["result",4,[["str",15]]]],[[["d",3]],["result",4,[["str",15]]]],[[["d",3],["constants",3]],["result",4,[["str",15]]]],[[["d",3],["constants",3]],["result",4,[["str",15]]]],[[["environment",3]],["expr",4]],[[["environment",3]],["linearization",3,[["expr",4]]]],[[["environment",3]],["evaluations",3,[["d",3]]]],[[["environment",3]],["evaluations",3,[["d",3]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],[[]],[[]],null,[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["d",3,[["fftfield",8]]]],["fftfield",8]],null,[[["hashset",3,[["column",4]]]],["result",4,[["linearization",3,[["expr",4]]],["str",15]]]],[[]],null,[[["fn",8]],["linearization",3]],null,[[]],[[]],[[["column",4]],["bool",15]],[[["variable",3]],["bool",15]],[[["constantexpr",4]],["bool",15]],[[["cacheid",3]],["bool",15]],[[["expr",4]],["bool",15]],[[["polishtoken",4]],["bool",15]],[[],["constantexpr",4]],[[],["expr",4]],[[]],[[]],[[["column",4]],["option",4,[["ordering",4]]]],[[["variable",3]],["option",4,[["ordering",4]]]],[[["cacheid",3]],["option",4,[["ordering",4]]]],[[["usize",15]]],[[["usize",15]]],[[["field",8],["usize",15]],["vec",3,[["field",8]]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3,[["polishtoken",4]]]],[[["environment",3]]],[[["environment",3]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["constants",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3,[["vec",3]]]],null,[[],["currornext",4]],[[],["localposition",3]],[[],["singlelookup",3]],[[],["jointlookup",3]],[[],["gatetype",4]],[[],["lookupinfo",3]],[[],["lookupsused",4]],[[],["circuitgate",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["currornext",4]],["ordering",4]],[[["gatetype",4]],["ordering",4]],null,[[["field",8],["doubleendediterator",8]],["field",8]],[[]],[[["gatewires",6]]],[[["gatewires",6]]],[[["gatewires",6]]],[[["gatewires",6]]],[[["gatewires",6]]],[[["gatewires",6]]],[[["gatewires",6]]],[[["usize",15]]],[[],["vec",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],null,[[["currornext",4]],["bool",15]],[[["gatetype",4]],["bool",15]],[[["fn",8]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["vec",3]],[[],["hashmap",3,[["usize",15]]]],[[],["option",4,[["lookupsused",4]]]],null,null,[[["currornext",4]],["option",4,[["ordering",4]]]],[[["gatetype",4]],["option",4,[["ordering",4]]]],[[]],[[]],null,[[["evaluationdomains",3]],["vec",3,[["e",3,[["d",3]]]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["usize",15]],[[],["option",4,[["i64",15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["u64",15]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[["usize",15],["constraintsystem",3]],["result",4,[["string",3]]]],[[["usize",15]],["result",4,[["string",3]]]],[[["usize",15],["constraintsystem",3]],["result",4,[["string",3]]]],[[["usize",15],["constraintsystem",3]],["result",4,[["string",3]]]],[[["usize",15]],["result",4,[["string",3]]]],[[["usize",15],["constraintsystem",3]],["result",4,[["string",3]]]],[[["usize",15]],["result",4,[["string",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["write",8]],["ioresult",6]],[[["gatewires",6]]],null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],["range",3,[["usize",15]]]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["witnessevals",3]],[[],["witnessshifts",3]],[[],["witnessoverdomains",3]],[[],["lookupevals",3]],[[],["lookupshifts",3]],[[],["lookuppolys",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[["vec",3,[["u32",15]]]],["vec",3,[["u32",15]]]],[[],["vec",3,[["gatetype",4]]]],[[["vec",3,[["u32",15]]]],["vec",3,[["vec",3,[["fftfield",8]]]]]],[[["usize",15]],["e",6,[["fftfield",8]]]],[[],["vec",3,[["vec",3,[["field",8]]]]]],[[["usize",15]]],[[["usize",15]],["e",6,[["field",8]]]],[[["",26,[["primefield",8],["display",8]]],["",26,[["primefield",8],["display",8]]],["usize",15]],["",26,[["primefield",8],["display",8]]]],null,null,[[]],[[]],[[["usize",15]],["e",6,[["field",8]]]],[[],["vec",3,[["e",6,[["field",8]]]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["usize",15],["",26,[["field",8],["display",8]]]],["endomulresult",3,[["",26,[["field",8],["display",8]]]]]],null,null,null,null,null,null,null,null,[[["fftfield",8],["iterator",8],["d",3,[["fftfield",8]]],["fftfield",8],["fftfield",8],["fftfield",8]],["result",4,[["evaluations",3,[["fftfield",8],["d",3,[["fftfield",8]]]]],["prooferror",4]]]],[[]],[[]],[[]],[[]],[[],["combinedentry",3]],[[],["uncombinedentry",3]],[[]],[[]],[[["combinedentry",3]],["ordering",4]],[[["uncombinedentry",3]],["ordering",4]],[[["d",3,[["fftfield",8]]]],["vec",3,[["e",6,[["fftfield",8]]]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["combinedentry",3]],["bool",15]],[[["uncombinedentry",3]],["bool",15]],[[["jointlookup",3],["usize",15]]],[[["jointlookup",3],["usize",15]],["combinedentry",3]],[[["jointlookup",3],["usize",15]],["uncombinedentry",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["combinedentry",3]],["bool",15]],[[["uncombinedentry",3]],["bool",15]],[[["combinedentry",3]],["option",4,[["ordering",4]]]],[[["uncombinedentry",3]],["option",4,[["ordering",4]]]],[[["",26,[["entry",8],["eq",8],["hash",8],["clone",8]]],["fn",8],["d",3,[["fftfield",8]]]],["result",4,[["vec",3,[["vec",3,[["",26,[["entry",8],["eq",8],["hash",8],["clone",8]]]]]]],["prooferror",4]]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["fftfield",8],["fn",8],["usize",15],["d",3,[["fftfield",8]]],["fftfield",8]]],[[]],[[]],[[["vec",3,[["fftfield",8]]],["d",3,[["fftfield",8]]]],["evaluations",3,[["fftfield",8],["d",3,[["fftfield",8]]]]]],null,null,[[]],[[]],[[],["e",6,[["",26,[["fftfield",8],["squarerootfield",8]]]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[["usize",15]],["e",6,[["fftfield",8]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["usize",15]],["varbasemulresult",3,[["",26,[["fftfield",8],["display",8]]]]]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["lookupevaluations",3]],[[],["proofevaluations",3]],[[],["randomoracles",3]],[[]],[[]],[[]],[[],["proofevaluations",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["proofevaluations",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["wire",3]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["wire",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[["wire",3]],["bool",15]],[[["usize",15]]],[[["read",8]],["ioresult",6]],null,[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["write",8]],["ioresult",6]],null,null,[[]],[[]],[[]],[[]],null,null,null,[[["d",3,[["",26,[["fftfield",8],["squarerootfield",8]]]]],["bool",15],["option",4]],["e",6,[["",26,[["fftfield",8],["squarerootfield",8]]]]]],[[["constraintsystem",3],["arithmeticspongeparams",3],["arc",3,[["srs",3]]]]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],null,[[["usize",15]]],[[["usize",15]]],null,null,null,[[["d",3,[["",26,[["fftfield",8],["squarerootfield",8]]]]],["bool",15],["option",4]],["linearization",3,[["vec",3,[["polishtoken",4,[["",26,[["fftfield",8],["squarerootfield",8]]]]]]]]]],[[["formatter",3]],["result",6]],null,null,null,[[]],[[]],[[["arc",3,[["srs",3]]],["path",3],["option",4,[["u64",15]]],["arithmeticspongeparams",3],["arithmeticspongeparams",3]],["result",4,[["string",3]]]],null,[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,null,[[],["hashset",3,[["column",4]]]],null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],null,null,null,null,[[["path",3],["option",4,[["bool",15]]]],["result",4,[["string",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["verifierindex",3]],[[]],[[]],null,null,null,[[]],[[["proofevaluations",3]]],[[],["scalarchallenge",3]],[[["arithmeticspongeparams",3]]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["lookupcommitments",3]],[[],["provercommitments",3]],[[],["proverproof",3]],[[]],[[]],[[]],null,[[["index",3],["vec",3]],["result",4,[["prooferror",4]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[]],[[]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],null,[[["index",3],["polycomm",3]],["oraclesresult",3,[["",26,[["clone",8],["fqsponge",8]]]]]],[[["index",3]],["vec",3,[["vec",3,[["vec",3]]]]]],null,null,null,null,null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4,[["bool",15],["prooferror",4]]]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[["field",8]],["vec",3,[["field",8]]]],null,null,[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],null,[[["usize",15]]],null,[[]],null,[[],["usize",15]],[[]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null],"p":[[3,"BenchmarkCtx"],[4,"GateError"],[3,"Shifts"],[3,"ConstraintSystem"],[13,"DisconnectedWires"],[13,"IncorrectPublic"],[13,"Custom"],[3,"EvaluationDomains"],[4,"ConstantExpr"],[4,"Op2"],[4,"PolishToken"],[4,"Expr"],[4,"Column"],[3,"LookupEnvironment"],[3,"Constants"],[3,"Environment"],[3,"Variable"],[3,"CacheId"],[3,"Cache"],[3,"Linearization"],[13,"Witness"],[13,"LookupSorted"],[13,"LookupKindIndex"],[13,"Index"],[13,"Coefficient"],[13,"Literal"],[13,"Pow"],[13,"Add"],[13,"Mul"],[13,"Sub"],[13,"Mds"],[13,"Constant"],[13,"Cell"],[13,"Double"],[13,"Square"],[13,"BinOp"],[13,"UnnormalizedLagrangeBasis"],[13,"Pow"],[13,"Cache"],[13,"Literal"],[13,"Cell"],[13,"Pow"],[13,"UnnormalizedLagrangeBasis"],[13,"Load"],[13,"Mds"],[4,"GateType"],[4,"CurrOrNext"],[4,"LookupsUsed"],[3,"LocalPosition"],[3,"SingleLookup"],[3,"JointLookup"],[3,"LookupInfo"],[3,"CircuitGate"],[3,"WitnessEvals"],[3,"WitnessShifts"],[3,"WitnessOverDomains"],[3,"LookupEvals"],[3,"LookupShifts"],[3,"LookupPolys"],[3,"EndoMulResult"],[3,"CombinedEntry"],[3,"UncombinedEntry"],[8,"Entry"],[3,"RoundEquation"],[3,"VarbaseMulResult"],[3,"LookupEvaluations"],[3,"RandomOracles"],[3,"ProofEvaluations"],[3,"Wire"],[3,"Index"],[3,"VerifierIndex"],[8,"FrSponge"],[3,"LookupCommitments"],[3,"ProverCommitments"],[3,"ProverProof"],[3,"OraclesResult"]]},\
"mina_curves":{"doc":"","t":[0,6,3,6,3,0,0,0,0,6,3,11,11,11,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,6,17,17,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,17,17,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["pasta","Fp","FpParameters","Fq","FqParameters","fp","fq","pallas","vesta","Fp","FpParameters","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip","Fq","FqParameters","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip","Affine","G_GENERATOR_X","G_GENERATOR_Y","PallasParameters","Projective","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","from","init","into","mul_by_a","to_owned","try_from","try_into","type_id","vzip","Affine","G_GENERATOR_X","G_GENERATOR_Y","Projective","VestaParameters","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","from","init","into","mul_by_a","to_owned","try_from","try_into","type_id","vzip"],"q":["mina_curves","mina_curves::pasta","","","","","","","","mina_curves::pasta::fp","","","","","","","","","","","","","","mina_curves::pasta::fq","","","","","","","","","","","","","","mina_curves::pasta::pallas","","","","","","","","","","","","","","","","","","","","","","","mina_curves::pasta::vesta","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","G_GENERATOR_X = 1","G1_GENERATOR_Y = …","","","","","","","","","","","","","","","","","","","","","","G_GENERATOR_X = 1","G1_GENERATOR_Y = …","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],"f":[null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[]],[[],["pallasparameters",3]],[[]],[[],["pallasparameters",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["pallasparameters",3]],["bool",15]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[]],[[],["vestaparameters",3]],[[]],[[],["vestaparameters",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["vestaparameters",3]],["bool",15]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[3,"FpParameters"],[3,"FqParameters"],[3,"PallasParameters"],[3,"VestaParameters"]]},\
"mina_signer":{"doc":"Mina signer","t":[6,8,13,4,8,8,13,11,11,11,11,5,5,11,11,0,10,11,11,11,11,0,0,0,0,0,10,0,11,10,11,11,11,10,11,6,6,8,6,10,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,3,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11],"n":["CurvePoint","Hashable","MAINNET","NetworkId","Signable","Signer","TESTNET","borrow","borrow_mut","clone","clone_into","create","custom","deref","deref_mut","domain","domain_string","drop","from","init","into","keypair","pubkey","roinput","schnorr","seckey","sign","signature","to_owned","to_roinput","try_from","try_into","type_id","verify","vzip","BaseField","CurvePoint","FieldHelpers","ScalarField","from_bytes","from_hex","to_bytes","to_hex","Keypair","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","fmt","from","from_hex","from_parts_unsafe","get_address","init","into","ne","public","rand","to_owned","to_string","try_from","try_into","type_id","vzip","CompressedPubKey","MINA_ADDRESS_LEN","PubKey","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","fmt","fmt","from","from","from_address","from_point_unsafe","init","init","into","into","into_address","into_address","into_compressed","into_point","is_odd","ne","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","x","ROInput","append_bit","append_bytes","append_field","append_scalar","append_u32","append_u64","borrow","borrow_mut","default","deref","deref_mut","drop","from","init","into","new","to_bytes","to_fields","try_from","try_into","type_id","vzip","Schnorr","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","sign","try_from","try_into","type_id","verify","vzip","SecKey","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","from","init","into","into_scalar","ne","new","rand","to_owned","try_from","try_into","type_id","vzip","Signature","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","fmt","from","init","into","ne","new","rx","s","to_owned","to_string","try_from","try_into","type_id","vzip"],"q":["mina_signer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_signer::domain","","","","","","","","mina_signer::keypair","","","","","","","","","","","","","","","","","","","","","","","","","","mina_signer::pubkey","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_signer::roinput","","","","","","","","","","","","","","","","","","","","","","","mina_signer::schnorr","","","","","","","","","","","","","","","","mina_signer::seckey","","","","","","","","","","","","","","","","","","","","","mina_signer::signature","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Interface for hashable objects","Id for mainnet","Mina network (or blockchain) identifier","Interface for signed objects","Signer interface for signing Signable inputs and verifying …","Id for all testnets","","","","","Create a default signer context for network instance …","Create a custom signer context for network instance …","","","Signer domain and helpers","Returns the unique domain string for this input type on …","","","","","Keypair structures and algorithms","Public key structures and algorithms","Random oracle input structures and algorithms","Mina Schnorr signature scheme","Secret key structures and helpers","Sign <code>input</code> (see Signable) using keypair <code>kp</code> and return the …","Mina signature structure and associated helpers","","Serialization to random oracle input","","","","Verify that the signature <code>sig</code> on <code>input</code> (see Signable) is …","","Base field element type","Affine curve point type","Field element helpers","Scalar field element type","Deserialize from bytes","Deserialize from hex","Serialize to bytes","Serialize to hex","Keypair structure","","","","","","","","","","","","Deserialize a keypair from secret key hex","Create a keypair from scalar field <code>secret</code> element and …","Obtain the Mina address corresponding to the keypair’s …","","","","Public key","Generate a random keypair","","","","","","","Compressed public keys consist of x-coordinate and …","Length of Mina addresses","Public key","","","","","","","","","","","","","","","","","","","","Deserialize Mina address into public key","Create a public key from curve point Note: Does not check …","","","","","Serialize public key into corresponding Mina address","Serialize compressed public key into corresponding Mina …","Convert public key into compressed public key","Convert public key into curve point","Parity of y-coordinate","","","","","","","","","","","","","X-coordinate","Random oracle input structure","Append a single bit","Append bytes","Append a base field element","Append a scalar field element","Append a 32-bit unsigned integer","Append a 64-bit unsigned integer","","","","","","","","","","Create a new empty random oracle input","Serialize random oracle input to bytes","Serialize random oracle input to vector of base field …","","","","","Schnorr signer context for the Mina signature algorithm","","","","","","","","","Create a new Schnorr signer context for network instance …","","","","","","","Secret key","","","","","","","","","","","","Convert secret key into scalar field element","","Create a secret key from scalar field element","Generate a random secret key","","","","","","Signature structure","","","","","","","","","","","","","","","Create a new signature","Base field component","Scalar field component","","","","","",""],"i":[0,0,1,0,0,0,1,1,1,1,1,0,0,1,1,0,2,1,1,1,1,0,0,0,0,0,3,0,1,4,1,1,1,3,1,0,0,0,0,5,5,5,5,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,7,7,7,8,7,7,7,8,7,8,7,8,7,7,8,7,7,8,7,7,8,7,8,7,8,7,8,8,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"f":[null,null,null,null,null,null,null,[[]],[[]],[[],["networkid",4]],[[]],[[["networkid",4]]],[[["arithmeticspongeparams",3,[["basefield",6]]],["networkid",4]]],[[["usize",15]]],[[["usize",15]]],null,[[["networkid",4]],["str",15]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],null,null,null,null,null,[[["keypair",3],["signable",8]],["signature",3]],null,[[]],[[],["roinput",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["signature",3],["pubkey",3],["signable",8]],["bool",15]],[[]],null,null,null,null,[[],["result",4,[["str",15]]]],[[["str",15]],["result",4,[["str",15]]]],[[],["vec",3,[["u8",15]]]],[[],["string",3]],null,[[]],[[]],[[],["keypair",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["keypair",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["str",15]],["result",4,[["str",15]]]],[[["scalarfield",6],["curvepoint",6]]],[[],["string",3]],[[],["usize",15]],[[]],[[["keypair",3]],["bool",15]],null,[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[],["pubkey",3]],[[],["compressedpubkey",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["pubkey",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["str",15]],["result",4,[["str",15]]]],[[["curvepoint",6]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["compressedpubkey",3]],[[],["curvepoint",6]],null,[[["pubkey",3]],["bool",15]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,[[["bool",15]]],[[]],[[["basefield",6]]],[[["scalarfield",6]]],[[["u32",15]]],[[["u64",15]]],[[]],[[]],[[],["roinput",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[]],[[],["vec",3,[["u8",15]]]],[[],["vec",3,[["basefield",6]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["arithmeticsponge",3,[["basefield",6]]],["networkid",4]],["schnorr",3]],[[["keypair",3]],["signature",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["signature",3],["pubkey",3]],["bool",15]],[[]],null,[[]],[[]],[[],["seckey",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["seckey",3]],["bool",15]],[[]],[[],["usize",15]],[[]],[[],["scalarfield",6]],[[["seckey",3]],["bool",15]],[[["scalarfield",6]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[],["signature",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["signature",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[["signature",3]],["bool",15]],[[["basefield",6],["scalarfield",6]]],null,null,[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[4,"NetworkId"],[8,"Signable"],[8,"Signer"],[8,"Hashable"],[8,"FieldHelpers"],[3,"Keypair"],[3,"PubKey"],[3,"CompressedPubKey"],[3,"ROInput"],[3,"Schnorr"],[3,"SecKey"],[3,"Signature"]]},\
"o1_utils":{"doc":"","t":[0,0,0,8,10,10,10,10,10,8,10,10,10,10,3,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,5,5],"n":["dense_polynomial","evaluations","serialization","ExtendedDensePolynomial","chunk_polynomial","eval","eval_polynomial","scale","shiftr","ExtendedEvaluations","pow","scale","shift","square","SerdeAs","borrow","borrow_mut","deref","deref_mut","deserialize_as","drop","from","init","into","ser","serialize_as","try_from","try_into","type_id","vzip","deserialize","serialize"],"q":["o1_utils","","","o1_utils::dense_polynomial","","","","","","o1_utils::evaluations","","","","","o1_utils::serialization","","","","","","","","","","","","","","","","o1_utils::serialization::ser",""],"d":["This adds a few utility functions for the DensePolynomial …","This adds a few utility functions for the Evaluations …","This adds a few utility functions for serializing and …","An extension for the DensePolynomial type.","Multiplies the chunks of a polynomial with powers of zeta^n","This function evaluates polynomial in chunks.","<code>eval_polynomial(coeffs, x)</code> evaluates a polynomial given …","This function “scales” (multiplies all the …","Shifts all the coefficients to the right.","An extension for the Evaluations type.","raise each evaluation to some power <code>pow</code>","This function “scales” (multiplies) a polynomial with …","utility function for shifting poly along domain coordinate","square each evaluation","You can use SerdeAs with serde_with in order to serialize …","","","","","","","","","","You can use this module for serialization and …","","","","","","You can use this to deserialize an arkworks type with …","You can use this to serialize an arkworks type with serde …"],"i":[0,0,0,0,1,1,1,1,1,0,2,2,2,2,0,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,0,0],"f":[null,null,null,null,[[["usize",15]]],[[["usize",15]],["vec",3]],[[]],[[]],[[["usize",15]]],null,[[["usize",15]]],[[]],[[["usize",15]]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["result",4]],[[],["result",4]]],"p":[[8,"ExtendedDensePolynomial"],[8,"ExtendedEvaluations"],[3,"SerdeAs"]]},\
"ocaml_derive":{"doc":"ocaml-derive adds a number of derives to make ocaml-gen …","t":[24,24,24,23],"n":["CustomType","Enum","Struct","func"],"q":["ocaml_derive","","",""],"d":["Derives implementations for OCamlDesc and OCamlBinding on …","The Enum derive macro. It generates implementations of …","The Struct derive macro. It generates implementations of …","A macro to create OCaml bindings for a function that uses #…"],"i":[0,0,0,0],"f":[null,null,null,null],"p":[]},\
"ocaml_gen":{"doc":"Generating bindings","t":[24,24,3,8,8,24,11,11,14,0,14,14,14,14,14,11,11,11,11,23,11,11,11,11,11,10,10,11,14,11,11,11,11,10],"n":["CustomType","Enum","Env","OCamlBinding","OCamlDesc","Struct","borrow","borrow_mut","const_random","conv","decl_fake_generic","decl_func","decl_module","decl_type","decl_type_alias","default","drop","fmt","from","func","get_type","into","nested","new_module","new_type","ocaml_binding","ocaml_desc","parent","paste","root","try_from","try_into","type_id","unique_id"],"q":["ocaml_gen","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Derives implementations for OCamlDesc and OCamlBinding on …","The Enum derive macro. It generates implementations of …","The environment at some point in time during the …","OCamlBinding is the trait implemented by types to generate …","OCamlDesc is the trait implemented by types to facilitate …","The Struct derive macro. It generates implementations of …","","","Random constants","Implementations of crate::OCamlDesc for types that have …","Creates a fake generic. This is a necessary hack, at the …","Declares the binding for a given function","Creates a module","Declares the binding for a given type","Declares a new OCaml type that is made of other types","","This makes sure that we close our OCaml modules (with the …","","","A macro to create OCaml bindings for a function that uses #…","retrieves a type that was declared previously","","how deeply nested are we currently? (default is 0)","create a module and enters it","Declares a new type. If the type was already declared, …","will generate the OCaml bindings for a type (called root …","describes the type in OCaml, given the current environment …","go back up one module","","you can call this to go back to the root and finalize the …","","","","Returns a unique ID for the type. This ID will not change …"],"i":[0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,2,3,1,0,1,1,1,1,3],"f":[null,null,null,null,null,null,[[]],[[]],null,null,null,null,null,null,null,[[],["env",3]],[[]],[[["formatter",3]],["result",6]],[[]],null,[[["u128",15],["str",15]],["string",3]],[[]],[[],["usize",15]],[[["str",15]],["string",3]],[[["u128",15],["str",15]]],[[["env",3],["option",4,[["str",15]]],["bool",15]],["string",3]],[[["env",3]],["string",3]],[[],["string",3]],null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u128",15]]],"p":[[3,"Env"],[8,"OCamlBinding"],[8,"OCamlDesc"]]},\
"oracle":{"doc":"","t":[8,10,10,10,10,10,10,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,13,3,3,18,18,18,3,3,3,3,18,18,18,18,18,18,8,8,4,13,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,5,10,11,12,5,11,12,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,17,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FqSponge","absorb_fr","absorb_g","challenge","challenge_fq","digest","new","pasta","poseidon","rndoracle","sponge","fp","fp5","fp_3","fq","fq5","fq_3","params","params","params","params","params","params","Absorbed","ArithmeticSponge","ArithmeticSpongeParams","FULL_MDS","HALF_ROUNDS_FULL","INITIAL_ARK","PlonkSpongeConstants15W","PlonkSpongeConstants3W","PlonkSpongeConstants5W","PlonkSpongeConstantsBasic","ROUNDS_FULL","ROUNDS_PARTIAL","SPONGE_BOX","SPONGE_CAPACITY","SPONGE_RATE","SPONGE_WIDTH","Sponge","SpongeConstants","SpongeState","Squeezed","absorb","absorb","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","constants","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from","from","full_round","full_round","init","init","init","init","init","init","init","into","into","into","into","into","into","into","mds","new","new","poseidon_block_cipher","reset","reset","round_constants","sbox","serialize","sponge_state","squeeze","squeeze","state","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","ConstraintInconsist","DomainCreation","EvaluationGroup","NoRoomForZkInWitness","OpenProof","OracleCommit","PolyCommit","PolyCommitWithBound","PolyDivision","PolyExponentiate","ProofCreation","ProofError","ProofVerification","RuntimeEnv","SumCheck","ValueNotInTable","WitnessCsInconsistent","WitnessGateError","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","fmt","from","init","into","to_owned","to_string","try_from","try_into","type_id","vzip","0","CHALLENGE_LENGTH_IN_LIMBS","DefaultFqSponge","DefaultFrSponge","ScalarChallenge","absorb_fr","absorb_g","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","challenge","challenge_fq","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","digest","drop","drop","drop","endo_coefficient","fmt","from","from","from","init","init","init","into","into","into","last_squeezed","last_squeezed","new","sponge","sponge","squeeze","squeeze","squeeze_field","squeeze_limbs","to_field","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["oracle","","","","","","","","","","","oracle::pasta","","","","","","oracle::pasta::fp","oracle::pasta::fp5","oracle::pasta::fp_3","oracle::pasta::fq","oracle::pasta::fq5","oracle::pasta::fq_3","oracle::poseidon","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oracle::poseidon::SpongeState","","oracle::rndoracle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oracle::sponge","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cryptographic sponge interface - for hashing an arbitrary …","","","","Absorb an array of field elements <code>x</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new cryptographic sponge using arithmetic sponge …","","","Reset the sponge back to its initial state (as if it were …","","","","","","Squeeze an output from the sponge","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A challenge which is used as a scalar on a group element …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,3,3,3,0,0,0,0,3,3,3,3,3,3,0,0,0,2,4,5,6,7,8,9,2,10,5,6,7,8,9,2,10,5,6,7,8,9,2,10,5,6,7,8,9,2,10,5,5,10,6,7,8,9,2,10,5,6,7,8,9,2,10,5,10,6,7,8,9,2,10,5,2,10,6,7,8,9,2,10,5,0,5,6,7,8,9,2,10,5,6,7,8,9,2,10,5,10,4,5,0,4,5,10,0,10,5,4,5,5,6,7,8,9,2,10,5,6,7,8,9,2,10,5,6,7,8,9,2,10,5,6,7,8,9,2,10,5,6,7,8,9,2,10,5,11,12,13,13,13,13,13,13,13,13,13,13,13,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,0,0,0,0,15,15,16,14,15,16,14,15,15,15,14,15,14,15,16,14,15,16,14,15,15,16,14,15,0,14,16,14,15,16,14,15,16,14,15,16,15,15,16,15,16,15,15,15,14,14,15,16,14,15,16,14,15,16,14,15,16,14,15],"f":[null,[[]],[[]],[[]],[[]],[[]],[[["arithmeticspongeparams",3]]],null,null,null,null,null,null,null,null,null,null,[[],["arithmeticspongeparams",3,[["fp",6]]]],[[],["arithmeticspongeparams",3,[["fp",6]]]],[[],["arithmeticspongeparams",3,[["fp",6]]]],[[],["arithmeticspongeparams",3,[["fq",6]]]],[[],["arithmeticspongeparams",3,[["fq",6]]]],[[],["arithmeticspongeparams",3,[["fq",6]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["plonkspongeconstantsbasic",3]],[[],["plonkspongeconstants5w",3]],[[],["plonkspongeconstants3w",3]],[[],["plonkspongeconstants15w",3]],[[],["spongestate",4]],[[],["arithmeticspongeparams",3]],[[],["arithmeticsponge",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["arithmeticspongeparams",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["arithmeticspongeparams",3],["vec",3],["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["arithmeticspongeparams",3]]],[[["arithmeticspongeparams",3]],["arithmeticsponge",3]],[[["arithmeticspongeparams",3],["vec",3]]],[[]],[[]],null,[[["field",8]],["field",8]],[[],["result",4]],null,[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["prooferror",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["scalarchallenge",3]],[[],["defaultfqsponge",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["primefield",8]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],null,null,[[["arithmeticspongeparams",3]],["defaultfqsponge",3]],null,null,[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]],["vec",3,[["u64",15]]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]]],"p":[[8,"FqSponge"],[4,"SpongeState"],[8,"SpongeConstants"],[8,"Sponge"],[3,"ArithmeticSponge"],[3,"PlonkSpongeConstantsBasic"],[3,"PlonkSpongeConstants5W"],[3,"PlonkSpongeConstants3W"],[3,"PlonkSpongeConstants15W"],[3,"ArithmeticSpongeParams"],[13,"Absorbed"],[13,"Squeezed"],[4,"ProofError"],[3,"ScalarChallenge"],[3,"DefaultFqSponge"],[3,"DefaultFrSponge"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};